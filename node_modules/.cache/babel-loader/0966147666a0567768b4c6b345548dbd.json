{"remainingRequest":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\src\\views\\teacher\\Detail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\src\\views\\teacher\\Detail.vue","mtime":1746388262699},{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\babel.config.js","mtime":1711182475899},{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711182484313},{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\babel-loader\\lib\\index.js","mtime":1711182482575},{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711182484313},{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\vue-loader\\lib\\index.js","mtime":1711182506214}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Detail.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <button @click=\"changeCommitModel\">加载数据</button>\r\n    <!-- 文章内容区域 -->\r\n    <div class=\"diff-page-wrapper\">\r\n      <div class=\"diff-page\">\r\n        <!-- 旧版本 -->\r\n        <div class=\"diff-column\">\r\n          <div class=\"header\">旧版本</div>\r\n          <span v-for=\"(line, index) in oldLines\" :key=\"'old-' + index\" class=\"line\"\r\n            :class=\"{ 'deleted': line.type === 'removed' }\">\r\n            <div v-if=\"line.type == 'enter'\"><br /></div>\r\n            <span v-else class=\"content\">{{ line.content }}</span>\r\n          </span>\r\n        </div>\r\n\r\n        <!-- 新版本 -->\r\n        <div  @mouseup=\"handleTextSelection\" class=\"diff-column\">\r\n          <div class=\"header\">新版本</div>\r\n          <span v-for=\"(line, index) in newLines\" :key=\"'new-' + index\" class=\"line\"\r\n            :class=\"{ 'added': line.type === 'added' }\">\r\n            <div v-if=\"line.type == 'enter'\"><br /></div>\r\n            <span v-else class=\"content\">{{ line.content }}</span>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- 批注输入弹窗 -->\r\n    <div v-if=\"showCommentInput\" class=\"annotation-modal\">\r\n      <div class=\"selected-text\">选中的文本：{{ selectedText }}</div>\r\n      <textarea v-model=\"commentInput\" placeholder=\"请输入批注内容\"></textarea>\r\n      <button @click=\"saveAnnotation\">保存批注</button>\r\n      <button @click=\"cancelAnnotation\">取消</button>\r\n    </div>\r\n    <div v-if=\"CommitModel\" class=\"annotation-modal\">\r\n      <h3>提交总结批注</h3>\r\n      <textarea v-model=\"summaryContent\" placeholder=\"请输入文章总结\"></textarea>\r\n      <button @click=\"submitSummary\">确认提交</button>\r\n      <button @click=\"() => { CommitModel = false }\">取消</button>\r\n    </div>\r\n\r\n    <!-- 批注展示 -->\r\n    <div class=\"annotations-list\">\r\n      <div v-for=\"(annotation, index) in annotations\" :key=\"index\" class=\"annotation-item\">\r\n        <span class=\"highlight\" @click=\"scrollToAnnotation(annotation)\">\r\n          {{ annotation.selectedText }}\r\n        </span>\r\n        <div class=\"comment\">{{ annotation.comment }}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nimport axios from 'axios';\r\nimport { diff_match_patch } from '../../api/diff_match_patch'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      articleContent: `这里是一篇示例文章内容，包含多个段落。教师可以选中任意文本片段进行批注。\r\n          批注功能需要准确记录选中文本的位置和内容，并支持后续的展示和还原。`,\r\n      annotations: [],\r\n      selectedText: '',\r\n      selectedRange: null,\r\n      showCommentInput: false,\r\n      commentInput: '',\r\n      CommitModel: false,\r\n      dmp: new diff_match_patch(),\r\n      oldText: '原始文本内容\\n第二行原始内容\\n第三行原始内容',\r\n      patchText: '@@ -1,3 +1,4 @@\\n 原始文本内容\\n-第二行原始内容\\n+第二行修改后的内容\\n+新增的第四行内容\\n 第三行原始内容\\n',\r\n      oldLines: [],\r\n      newLines: [],\r\n      showDiff: true,\r\n      articleContent: `这里是一篇示例文章内容，包含多个段落。教师可以选中任意文本片段进行批注。\r\n          批注功能需要准确记录选中文本的位置和内容，并支持后续的展示和还原。`,\r\n      annotations: [],\r\n      selectedText: '',\r\n      selectedRange: null,\r\n      commentInput: '',\r\n\r\n    };\r\n  },\r\n  mounted() {\r\n    this.loadData();\r\n    this.processDiff()\r\n\r\n  },\r\n  computed: {\r\n    // 生成包含批注标记的内容\r\n    annotatedContent() {\r\n      let content = this.oldText\r\n      this.annotations.forEach(anno => {\r\n        const highlight = `<span class=\"highlight\" data-id=\"${anno.id}\" data-occurrence=\"${anno.occurrence}\">${anno.selectedText}</span>`\r\n        content = this.replaceNth(content, this.escapeRegExp(anno.selectedText), highlight, anno.occurrence)\r\n      })\r\n      return content\r\n    },\r\n\r\n    // 序列化批注信息\r\n    serializedAnnotations() {\r\n      return JSON.stringify(this.annotations);\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    changeCommitModel() {\r\n      console.log(this.CommitModel)\r\n      this.CommitModel = true;\r\n    },\r\n    async submitSummary() {\r\n      try {\r\n        const jsonAnnotations = JSON.stringify(this.annotations);\r\n        const response = await axios.post(\r\n          'http://localhost:9251/api/marking/save',\r\n          {\r\n            docId: localStorage.getItem('docId'),\r\n            modificationId: localStorage.getItem('modificationId'),\r\n            markingWhat: this.summaryContent,\r\n            marking: jsonAnnotations\r\n          },\r\n          {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          }\r\n        );\r\n      } catch (e) {\r\n        console.log(e)\r\n      }\r\n    },\r\n    async loadData() {\r\n      try {\r\n        const modification = JSON.parse(localStorage.getItem('modification'))\r\n        const prevModification = JSON.parse(localStorage.getItem('prevModification'))\r\n        console.log(modification)\r\n        const response = await axios.get(\r\n          'http://localhost:9251/api/modification/getDocByModificationId/' + modification.docId + '/' + modification.id,\r\n        );\r\n        const modificationList = response.data.resultData\r\n        this.patchText = response.data.modification\r\n        console.log(modificationList)\r\n        const response2 = await axios.get(\r\n          'http://localhost:9251/api/docs/' + modification.docId,\r\n        );\r\n        this.oldText = response2.data.txt\r\n        let newText = response2.data.txt\r\n        this.articleContent = response2.data.txt\r\n        try {\r\n          const response3 = await axios.get(\r\n            'http://localhost:9251/api/marking/getByModificationId/' + prevModification.id,\r\n          );\r\n          this.annotations = JSON.parse(response3.data.marking)\r\n          console.log('this.annotations')\r\n          console.log(this.annotations)\r\n        } catch (error) {\r\n          console.log(error)\r\n        }\r\n        for (let i = modificationList.length - 1; i >= 0; i--) {\r\n          const data = modificationList[i];\r\n          const patches = this.dmp.patch_fromText(data.modification);\r\n          const [nextText, results] = this.dmp.patch_apply(patches, newText);\r\n          this.oldText = newText\r\n          newText = nextText;\r\n          if (results.some(success => !success)) {\r\n            throw new Error('部分补丁应用失败');\r\n          }\r\n        }\r\n        // 生成标准差异\r\n        const diffs = this.dmp.diff_main(this.oldText, newText)\r\n        this.dmp.diff_cleanupSemantic(diffs)  // 优化差异显示\r\n\r\n        console.log('标准差异:', !Array.isArray(diffs), !Array.isArray(diffs) || diffs.length < 2)\r\n        // 处理差异结果\r\n        this.generateLines(diffs)\r\n        // this.pagination.total = response.data.data.total || 0;\r\n      } catch (error) {\r\n        console.error('请求异常:', error);\r\n        this.$message.error('数据加载失败');\r\n      }\r\n    },\r\n    handleTextSelection() {\r\n      const selection = window.getSelection();\r\n      if (!selection.rangeCount) return;\r\n\r\n      const range = selection.getRangeAt(0);\r\n      const selectedText = range.toString().trim();\r\n\r\n      if (selectedText) {\r\n        this.selectedText = selectedText;\r\n        this.selectedRange = range;\r\n        this.showCommentInput = true;\r\n      }\r\n    },\r\n\r\n    saveAnnotation() {\r\n      if (!this.commentInput) return;\r\n\r\n      // 计算 occurrence\r\n      const allMatches = Array.from(this.articleContent.matchAll(new RegExp(this.escapeRegExp(this.selectedText), 'g')))\r\n      // 计算选区在全文中的起始偏移\r\n      const fullText = this.articleContent\r\n      const preText = fullText.slice(0, fullText.indexOf(this.selectedText))\r\n      // 实际上更严谨的方式是根据 range 去计算全局 offset，这里简化为 indexOf，\r\n      // 如果你的全文中有多行相同文本，还可以更精确地结合行号和 offset\r\n      const cursorGlobalIndex = fullText.indexOf(this.selectedText, allMatches[0]?.index ?? 0)\r\n      // 找到是第几个 match\r\n      let occurrence = 1\r\n      for (let i = 0; i < allMatches.length; i++) {\r\n        if (allMatches[i].index === cursorGlobalIndex) {\r\n          occurrence = i + 1\r\n          break\r\n        }\r\n      }\r\n\r\n      const newAnnotation = {\r\n        id: Date.now(),\r\n        selectedText: this.selectedText,\r\n        comment: this.commentInput,\r\n        occurrence,     // 第几处匹配\r\n        // 你还可以保存 startContainerPath / offset 等  \r\n      };\r\n\r\n      this.annotations.push(newAnnotation);\r\n      this.clearSelection();\r\n    },\r\n\r\n    // 把文本的第 n 处匹配替换成 replacement\r\n    replaceNth(content, searchPattern, replacement, n) {\r\n      let i = 0;\r\n      return content.replace(new RegExp(searchPattern, 'g'), match => {\r\n        i++;\r\n        return i === n ? replacement : match;\r\n      });\r\n    },\r\n\r\n    // 转义正则特殊字符\r\n    escapeRegExp(string) {\r\n      return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n    },\r\n\r\n    // 还原时，可根据 data-id + data-occurrence 找到正确元素\r\n    scrollToAnnotation(annotation) {\r\n      // 通过 occurrence 精准匹配\r\n      const selector = `[data-id=\"${annotation.id}\"][data-occurrence=\"${annotation.occurrence}\"]`\r\n      const element = this.$el.querySelector(selector)\r\n      if (element) element.scrollIntoView({ behavior: 'smooth' })\r\n    },\r\n\r\n    cancelAnnotation() {\r\n      this.clearSelection();\r\n    },\r\n\r\n    clearSelection() {\r\n      this.showCommentInput = false;\r\n      this.commentInput = '';\r\n      window.getSelection().removeAllRanges();\r\n    },\r\n\r\n    // 将DOM节点路径转换为可序列化的路径\r\n    getNodePath(node) {\r\n      const path = [];\r\n      while (node.parentNode) {\r\n        path.push(Array.prototype.indexOf.call(node.parentNode.childNodes, node));\r\n        node = node.parentNode;\r\n      }\r\n      return path;\r\n    },\r\n\r\n    // 从序列化字符串加载批注\r\n    loadAnnotations(serialized) {\r\n      try {\r\n        this.annotations = JSON.parse(serialized).map(anno => ({\r\n          ...anno,\r\n          range: this.restoreRange(anno)\r\n        }));\r\n      } catch (e) {\r\n        console.error('解析批注失败:', e);\r\n      }\r\n    },\r\n\r\n    // 还原Range对象\r\n    restoreRange(annotation) {\r\n      const range = document.createRange();\r\n\r\n      let startNode = document.body;\r\n      annotation.startContainerPath.reverse().forEach(index => {\r\n        startNode = startNode.childNodes[index];\r\n      });\r\n\r\n      let endNode = document.body;\r\n      annotation.endContainerPath.reverse().forEach(index => {\r\n        endNode = endNode.childNodes[index];\r\n      });\r\n\r\n      range.setStart(startNode, annotation.startOffset);\r\n      range.setEnd(endNode, annotation.endOffset);\r\n      return range;\r\n    },\r\n\r\n    scrollToAnnotation(annotation) {\r\n      const element = document.querySelector(`[data-id=\"${annotation.id}\"]`);\r\n      if (element) {\r\n        element.scrollIntoView({ behavior: 'smooth' });\r\n      }\r\n    },\r\n    generateLines(diffs) {\r\n      let oldLineNum = 1\r\n      let newLineNum = 1\r\n      const oldLines = []\r\n      const newLines = []\r\n\r\n      console.log(diffs)\r\n      // 安全遍历差异\r\n      diffs.forEach(diff => {\r\n        const type = diff[0]\r\n        const content = diff[1]\r\n\r\n        const lines = content.split('\\n').filter(l => l !== '')\r\n\r\n        console.log('处理差异:', lines)\r\n        switch (type) {\r\n          case 1:\r\n            oldLines.push({\r\n              content: content,\r\n              oldNum: oldLineNum++,\r\n              type: 'removed'\r\n            })\r\n            newLines.push({ type: 'empty' })\r\n            break\r\n\r\n          case -1:\r\n            newLines.push({\r\n              content: content,\r\n              newNum: newLineNum++,\r\n              type: 'added'\r\n            })\r\n            oldLines.push({ type: 'empty' })\r\n            break\r\n\r\n          default:  // DIFF_EQUAL\r\n            oldLines.push({\r\n              content: content,\r\n              oldNum: oldLineNum++,\r\n              type: 'same'\r\n            })\r\n            newLines.push({\r\n              content: content,\r\n              newNum: newLineNum++,\r\n              type: 'same'\r\n            })\r\n        }\r\n      })\r\n      this.oldLines = oldLines\r\n      this.newLines = newLines\r\n      console.log(this.oldLines)\r\n      console.log(this.newLines)\r\n      console.log('-------------------------------------')\r\n      this.oldLines = this.splitByNewline(this.oldLines)\r\n      this.newLines = this.splitByNewline(this.newLines)\r\n      console.log(this.oldLines)\r\n      console.log(this.newLines)\r\n    },\r\n    splitByNewline(items) {\r\n      const result = [];\r\n      let counter = 0;\r\n\r\n      // 如果输入数组中已有 newNum，就从最大的开始+1，否则从1开始\r\n      if (items.length > 0) {\r\n        const maxNum = Math.max(...items.map(it => it.newNum));\r\n        counter = maxNum + 1;\r\n      } else {\r\n        counter = 1;\r\n      }\r\n\r\n      // 正则：匹配所有换行表现\r\n      const newlineRe = /(\\r\\n|\\r|\\n)/;\r\n\r\n      items.forEach(item => {\r\n        const { content, type } = item;\r\n\r\n        // 如果内容中没有换行，直接原封不动推入\r\n        if (!newlineRe.test(content)) {\r\n          result.push({ content, newNum: counter++, type });\r\n          return;\r\n        }\r\n\r\n        // 否则先按换行分割并保留分隔符\r\n        const parts = content.split(newlineRe);\r\n\r\n        parts.forEach(token => {\r\n          if (newlineRe.test(token)) {\r\n            // 遇到换行符，插入一个空 content 的 enter 元素\r\n            result.push({\r\n              content: '',\r\n              newNum: counter++,\r\n              type: 'enter'\r\n            });\r\n          } else if (token.length > 0) {\r\n            // 普通文本段落\r\n            result.push({\r\n              content: token,\r\n              newNum: counter++,\r\n              type: type  // 保持原来元素的 type，比如 'same'\r\n            });\r\n          }\r\n          // 如果 token 既不是换行也为空串，就跳过\r\n        });\r\n      });\r\n\r\n      return result;\r\n    },\r\n    handleTextSelection() {\r\n      const selection = window.getSelection();\r\n      if (!selection.rangeCount) return;\r\n      const range = selection.getRangeAt(0);\r\n      const selectedText = range.toString().trim();\r\n      if (selectedText) {\r\n        this.selectedText = selectedText;\r\n        this.selectedRange = range;\r\n        this.showCommentInput = true;\r\n      }\r\n    },\r\n\r\n  }\r\n};\r\n</script>\r\n  \r\n<style>\r\n.container {\r\n  display: flex;\r\n  margin: 0 auto;\r\n}\r\n\r\n.article-content {\r\n  flex: 2;\r\n  padding: 20px;\r\n  line-height: 1.6;\r\n  border-right: 1px solid #ccc;\r\n}\r\n\r\n.annotations-list {\r\n  flex: 1;\r\n  padding: 20px;\r\n}\r\n\r\n.highlight {\r\n  background-color: #ffeb3b;\r\n  cursor: pointer;\r\n}\r\n\r\n.annotation-modal {\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background: white;\r\n  padding: 20px;\r\n  border: 1px solid #ccc;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  z-index: 1000;\r\n}\r\n\r\n.annotation-item {\r\n  margin-bottom: 15px;\r\n  padding: 10px;\r\n  border: 1px solid #eee;\r\n}\r\n\r\n:host {\r\n  display: block;\r\n  height: 100%;\r\n}\r\n\r\n.diff-page,\r\n.container {\r\n  overflow-y: auto;\r\n  max-height: 90vh;\r\n}\r\n\r\n.diff-page {\r\n  display: flex;\r\n  gap: 20px;\r\n  padding: 20px;\r\n  font-family: monospace;\r\n}\r\n\r\n.diff-column {\r\n  flex: 1;\r\n  border: 1px solid #e1e4e8;\r\n  border-radius: 6px;\r\n}\r\n\r\n.header {\r\n  padding: 10px;\r\n  background: #f6f8fa;\r\n  border-bottom: 1px solid #e1e4e8;\r\n  font-weight: bold;\r\n}\r\n\r\n.line {\r\n  display: flex;\r\n  /* padding: 2px 10px; */\r\n}\r\n\r\n.diff-column .line {\r\n  display: inline;\r\n  /* 或者 display: inline; */\r\n  /* 如果想控制各行之间少许间距，可加 margin-right */\r\n  /* margin-right: 8px; */\r\n}\r\n\r\n.line-number {\r\n  min-width: 40px;\r\n  color: rgba(27, 31, 35, .3);\r\n  padding-right: 10px;\r\n  user-select: none;\r\n}\r\n\r\n.deleted {\r\n  background-color: #ffeef0;\r\n}\r\n\r\n.added {\r\n  background-color: #e6ffed;\r\n}\r\n\r\n.content {\r\n  white-space: pre-wrap;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  margin: 0 auto;\r\n}\r\n\r\n.article-content {\r\n  flex: 2;\r\n  padding: 20px;\r\n  line-height: 1.6;\r\n  border-right: 1px solid #ccc;\r\n}\r\n\r\n.annotations-list {\r\n  flex: 1;\r\n  padding: 20px;\r\n}\r\n\r\n.highlight {\r\n  background-color: #ffeb3b;\r\n  cursor: pointer;\r\n}\r\n\r\n.annotation-modal {\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background: white;\r\n  padding: 20px;\r\n  border: 1px solid #ccc;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  z-index: 1000;\r\n}\r\n\r\n.annotation-item {\r\n  margin-bottom: 15px;\r\n  padding: 10px;\r\n  border: 1px solid #eee;\r\n}\r\n\r\n.diff-page-wrapper {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n  padding: 20px;\r\n}\r\n\r\n.comparison-result {\r\n  border: 1px solid #e1e4e8;\r\n  border-radius: 6px;\r\n  background: #fefefe;\r\n}\r\n</style>"],"sourceRoot":"src/views/teacher"}]}