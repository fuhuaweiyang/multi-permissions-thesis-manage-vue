{"remainingRequest":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\src\\views\\teacher\\Detail.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\src\\views\\teacher\\Detail.vue","mtime":1746388262699},{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\css-loader\\dist\\cjs.js","mtime":1711182487975},{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1711182506221},{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\postcss-loader\\src\\index.js","mtime":1711182496599},{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711182484313},{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\vue-loader\\lib\\index.js","mtime":1711182506214}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5jb250YWluZXIgew0KICBkaXNwbGF5OiBmbGV4Ow0KICBtYXJnaW46IDAgYXV0bzsNCn0NCg0KLmFydGljbGUtY29udGVudCB7DQogIGZsZXg6IDI7DQogIHBhZGRpbmc6IDIwcHg7DQogIGxpbmUtaGVpZ2h0OiAxLjY7DQogIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNjY2M7DQp9DQoNCi5hbm5vdGF0aW9ucy1saXN0IHsNCiAgZmxleDogMTsNCiAgcGFkZGluZzogMjBweDsNCn0NCg0KLmhpZ2hsaWdodCB7DQogIGJhY2tncm91bmQtY29sb3I6ICNmZmViM2I7DQogIGN1cnNvcjogcG9pbnRlcjsNCn0NCg0KLmFubm90YXRpb24tbW9kYWwgew0KICBwb3NpdGlvbjogZml4ZWQ7DQogIHRvcDogNTAlOw0KICBsZWZ0OiA1MCU7DQogIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpOw0KICBiYWNrZ3JvdW5kOiB3aGl0ZTsNCiAgcGFkZGluZzogMjBweDsNCiAgYm9yZGVyOiAxcHggc29saWQgI2NjYzsNCiAgYm94LXNoYWRvdzogMCAycHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMSk7DQogIHotaW5kZXg6IDEwMDA7DQp9DQoNCi5hbm5vdGF0aW9uLWl0ZW0gew0KICBtYXJnaW4tYm90dG9tOiAxNXB4Ow0KICBwYWRkaW5nOiAxMHB4Ow0KICBib3JkZXI6IDFweCBzb2xpZCAjZWVlOw0KfQ0KDQo6aG9zdCB7DQogIGRpc3BsYXk6IGJsb2NrOw0KICBoZWlnaHQ6IDEwMCU7DQp9DQoNCi5kaWZmLXBhZ2UsDQouY29udGFpbmVyIHsNCiAgb3ZlcmZsb3cteTogYXV0bzsNCiAgbWF4LWhlaWdodDogOTB2aDsNCn0NCg0KLmRpZmYtcGFnZSB7DQogIGRpc3BsYXk6IGZsZXg7DQogIGdhcDogMjBweDsNCiAgcGFkZGluZzogMjBweDsNCiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTsNCn0NCg0KLmRpZmYtY29sdW1uIHsNCiAgZmxleDogMTsNCiAgYm9yZGVyOiAxcHggc29saWQgI2UxZTRlODsNCiAgYm9yZGVyLXJhZGl1czogNnB4Ow0KfQ0KDQouaGVhZGVyIHsNCiAgcGFkZGluZzogMTBweDsNCiAgYmFja2dyb3VuZDogI2Y2ZjhmYTsNCiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlMWU0ZTg7DQogIGZvbnQtd2VpZ2h0OiBib2xkOw0KfQ0KDQoubGluZSB7DQogIGRpc3BsYXk6IGZsZXg7DQogIC8qIHBhZGRpbmc6IDJweCAxMHB4OyAqLw0KfQ0KDQouZGlmZi1jb2x1bW4gLmxpbmUgew0KICBkaXNwbGF5OiBpbmxpbmU7DQogIC8qIOaIluiAhSBkaXNwbGF5OiBpbmxpbmU7ICovDQogIC8qIOWmguaenOaDs+aOp+WItuWQhOihjOS5i+mXtOWwkeiuuOmXtOi3ne+8jOWPr+WKoCBtYXJnaW4tcmlnaHQgKi8NCiAgLyogbWFyZ2luLXJpZ2h0OiA4cHg7ICovDQp9DQoNCi5saW5lLW51bWJlciB7DQogIG1pbi13aWR0aDogNDBweDsNCiAgY29sb3I6IHJnYmEoMjcsIDMxLCAzNSwgLjMpOw0KICBwYWRkaW5nLXJpZ2h0OiAxMHB4Ow0KICB1c2VyLXNlbGVjdDogbm9uZTsNCn0NCg0KLmRlbGV0ZWQgew0KICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZlZWYwOw0KfQ0KDQouYWRkZWQgew0KICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTZmZmVkOw0KfQ0KDQouY29udGVudCB7DQogIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDsNCn0NCg0KLmNvbnRhaW5lciB7DQogIGRpc3BsYXk6IGZsZXg7DQogIG1hcmdpbjogMCBhdXRvOw0KfQ0KDQouYXJ0aWNsZS1jb250ZW50IHsNCiAgZmxleDogMjsNCiAgcGFkZGluZzogMjBweDsNCiAgbGluZS1oZWlnaHQ6IDEuNjsNCiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2NjYzsNCn0NCg0KLmFubm90YXRpb25zLWxpc3Qgew0KICBmbGV4OiAxOw0KICBwYWRkaW5nOiAyMHB4Ow0KfQ0KDQouaGlnaGxpZ2h0IHsNCiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZWIzYjsNCiAgY3Vyc29yOiBwb2ludGVyOw0KfQ0KDQouYW5ub3RhdGlvbi1tb2RhbCB7DQogIHBvc2l0aW9uOiBmaXhlZDsNCiAgdG9wOiA1MCU7DQogIGxlZnQ6IDUwJTsNCiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7DQogIGJhY2tncm91bmQ6IHdoaXRlOw0KICBwYWRkaW5nOiAyMHB4Ow0KICBib3JkZXI6IDFweCBzb2xpZCAjY2NjOw0KICBib3gtc2hhZG93OiAwIDJweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4xKTsNCiAgei1pbmRleDogMTAwMDsNCn0NCg0KLmFubm90YXRpb24taXRlbSB7DQogIG1hcmdpbi1ib3R0b206IDE1cHg7DQogIHBhZGRpbmc6IDEwcHg7DQogIGJvcmRlcjogMXB4IHNvbGlkICNlZWU7DQp9DQoNCi5kaWZmLXBhZ2Utd3JhcHBlciB7DQogIGRpc3BsYXk6IGZsZXg7DQogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47DQogIGdhcDogMjBweDsNCiAgcGFkZGluZzogMjBweDsNCn0NCg0KLmNvbXBhcmlzb24tcmVzdWx0IHsNCiAgYm9yZGVyOiAxcHggc29saWQgI2UxZTRlODsNCiAgYm9yZGVyLXJhZGl1czogNnB4Ow0KICBiYWNrZ3JvdW5kOiAjZmVmZWZlOw0KfQ0K"},{"version":3,"sources":["Detail.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6afile":"Detail.vue","sourceRoot":"src/views/teacher","sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <button @click=\"changeCommitModel\">加载数据</button>\r\n    <!-- 文章内容区域 -->\r\n    <div class=\"diff-page-wrapper\">\r\n      <div class=\"diff-page\">\r\n        <!-- 旧版本 -->\r\n        <div class=\"diff-column\">\r\n          <div class=\"header\">旧版本</div>\r\n          <span v-for=\"(line, index) in oldLines\" :key=\"'old-' + index\" class=\"line\"\r\n            :class=\"{ 'deleted': line.type === 'removed' }\">\r\n            <div v-if=\"line.type == 'enter'\"><br /></div>\r\n            <span v-else class=\"content\">{{ line.content }}</span>\r\n          </span>\r\n        </div>\r\n\r\n        <!-- 新版本 -->\r\n        <div  @mouseup=\"handleTextSelection\" class=\"diff-column\">\r\n          <div class=\"header\">新版本</div>\r\n          <span v-for=\"(line, index) in newLines\" :key=\"'new-' + index\" class=\"line\"\r\n            :class=\"{ 'added': line.type === 'added' }\">\r\n            <div v-if=\"line.type == 'enter'\"><br /></div>\r\n            <span v-else class=\"content\">{{ line.content }}</span>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- 批注输入弹窗 -->\r\n    <div v-if=\"showCommentInput\" class=\"annotation-modal\">\r\n      <div class=\"selected-text\">选中的文本：{{ selectedText }}</div>\r\n      <textarea v-model=\"commentInput\" placeholder=\"请输入批注内容\"></textarea>\r\n      <button @click=\"saveAnnotation\">保存批注</button>\r\n      <button @click=\"cancelAnnotation\">取消</button>\r\n    </div>\r\n    <div v-if=\"CommitModel\" class=\"annotation-modal\">\r\n      <h3>提交总结批注</h3>\r\n      <textarea v-model=\"summaryContent\" placeholder=\"请输入文章总结\"></textarea>\r\n      <button @click=\"submitSummary\">确认提交</button>\r\n      <button @click=\"() => { CommitModel = false }\">取消</button>\r\n    </div>\r\n\r\n    <!-- 批注展示 -->\r\n    <div class=\"annotations-list\">\r\n      <div v-for=\"(annotation, index) in annotations\" :key=\"index\" class=\"annotation-item\">\r\n        <span class=\"highlight\" @click=\"scrollToAnnotation(annotation)\">\r\n          {{ annotation.selectedText }}\r\n        </span>\r\n        <div class=\"comment\">{{ annotation.comment }}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nimport axios from 'axios';\r\nimport { diff_match_patch } from '../../api/diff_match_patch'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      articleContent: `这里是一篇示例文章内容，包含多个段落。教师可以选中任意文本片段进行批注。\r\n          批注功能需要准确记录选中文本的位置和内容，并支持后续的展示和还原。`,\r\n      annotations: [],\r\n      selectedText: '',\r\n      selectedRange: null,\r\n      showCommentInput: false,\r\n      commentInput: '',\r\n      CommitModel: false,\r\n      dmp: new diff_match_patch(),\r\n      oldText: '原始文本内容\\n第二行原始内容\\n第三行原始内容',\r\n      patchText: '@@ -1,3 +1,4 @@\\n 原始文本内容\\n-第二行原始内容\\n+第二行修改后的内容\\n+新增的第四行内容\\n 第三行原始内容\\n',\r\n      oldLines: [],\r\n      newLines: [],\r\n      showDiff: true,\r\n      articleContent: `这里是一篇示例文章内容，包含多个段落。教师可以选中任意文本片段进行批注。\r\n          批注功能需要准确记录选中文本的位置和内容，并支持后续的展示和还原。`,\r\n      annotations: [],\r\n      selectedText: '',\r\n      selectedRange: null,\r\n      commentInput: '',\r\n\r\n    };\r\n  },\r\n  mounted() {\r\n    this.loadData();\r\n    this.processDiff()\r\n\r\n  },\r\n  computed: {\r\n    // 生成包含批注标记的内容\r\n    annotatedContent() {\r\n      let content = this.oldText\r\n      this.annotations.forEach(anno => {\r\n        const highlight = `<span class=\"highlight\" data-id=\"${anno.id}\" data-occurrence=\"${anno.occurrence}\">${anno.selectedText}</span>`\r\n        content = this.replaceNth(content, this.escapeRegExp(anno.selectedText), highlight, anno.occurrence)\r\n      })\r\n      return content\r\n    },\r\n\r\n    // 序列化批注信息\r\n    serializedAnnotations() {\r\n      return JSON.stringify(this.annotations);\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    changeCommitModel() {\r\n      console.log(this.CommitModel)\r\n      this.CommitModel = true;\r\n    },\r\n    async submitSummary() {\r\n      try {\r\n        const jsonAnnotations = JSON.stringify(this.annotations);\r\n        const response = await axios.post(\r\n          'http://localhost:9251/api/marking/save',\r\n          {\r\n            docId: localStorage.getItem('docId'),\r\n            modificationId: localStorage.getItem('modificationId'),\r\n            markingWhat: this.summaryContent,\r\n            marking: jsonAnnotations\r\n          },\r\n          {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          }\r\n        );\r\n      } catch (e) {\r\n        console.log(e)\r\n      }\r\n    },\r\n    async loadData() {\r\n      try {\r\n        const modification = JSON.parse(localStorage.getItem('modification'))\r\n        const prevModification = JSON.parse(localStorage.getItem('prevModification'))\r\n        console.log(modification)\r\n        const response = await axios.get(\r\n          'http://localhost:9251/api/modification/getDocByModificationId/' + modification.docId + '/' + modification.id,\r\n        );\r\n        const modificationList = response.data.resultData\r\n        this.patchText = response.data.modification\r\n        console.log(modificationList)\r\n        const response2 = await axios.get(\r\n          'http://localhost:9251/api/docs/' + modification.docId,\r\n        );\r\n        this.oldText = response2.data.txt\r\n        let newText = response2.data.txt\r\n        this.articleContent = response2.data.txt\r\n        try {\r\n          const response3 = await axios.get(\r\n            'http://localhost:9251/api/marking/getByModificationId/' + prevModification.id,\r\n          );\r\n          this.annotations = JSON.parse(response3.data.marking)\r\n          console.log('this.annotations')\r\n          console.log(this.annotations)\r\n        } catch (error) {\r\n          console.log(error)\r\n        }\r\n        for (let i = modificationList.length - 1; i >= 0; i--) {\r\n          const data = modificationList[i];\r\n          const patches = this.dmp.patch_fromText(data.modification);\r\n          const [nextText, results] = this.dmp.patch_apply(patches, newText);\r\n          this.oldText = newText\r\n          newText = nextText;\r\n          if (results.some(success => !success)) {\r\n            throw new Error('部分补丁应用失败');\r\n          }\r\n        }\r\n        // 生成标准差异\r\n        const diffs = this.dmp.diff_main(this.oldText, newText)\r\n        this.dmp.diff_cleanupSemantic(diffs)  // 优化差异显示\r\n\r\n        console.log('标准差异:', !Array.isArray(diffs), !Array.isArray(diffs) || diffs.length < 2)\r\n        // 处理差异结果\r\n        this.generateLines(diffs)\r\n        // this.pagination.total = response.data.data.total || 0;\r\n      } catch (error) {\r\n        console.error('请求异常:', error);\r\n        this.$message.error('数据加载失败');\r\n      }\r\n    },\r\n    handleTextSelection() {\r\n      const selection = window.getSelection();\r\n      if (!selection.rangeCount) return;\r\n\r\n      const range = selection.getRangeAt(0);\r\n      const selectedText = range.toString().trim();\r\n\r\n      if (selectedText) {\r\n        this.selectedText = selectedText;\r\n        this.selectedRange = range;\r\n        this.showCommentInput = true;\r\n      }\r\n    },\r\n\r\n    saveAnnotation() {\r\n      if (!this.commentInput) return;\r\n\r\n      // 计算 occurrence\r\n      const allMatches = Array.from(this.articleContent.matchAll(new RegExp(this.escapeRegExp(this.selectedText), 'g')))\r\n      // 计算选区在全文中的起始偏移\r\n      const fullText = this.articleContent\r\n      const preText = fullText.slice(0, fullText.indexOf(this.selectedText))\r\n      // 实际上更严谨的方式是根据 range 去计算全局 offset，这里简化为 indexOf，\r\n      // 如果你的全文中有多行相同文本，还可以更精确地结合行号和 offset\r\n      const cursorGlobalIndex = fullText.indexOf(this.selectedText, allMatches[0]?.index ?? 0)\r\n      // 找到是第几个 match\r\n      let occurrence = 1\r\n      for (let i = 0; i < allMatches.length; i++) {\r\n        if (allMatches[i].index === cursorGlobalIndex) {\r\n          occurrence = i + 1\r\n          break\r\n        }\r\n      }\r\n\r\n      const newAnnotation = {\r\n        id: Date.now(),\r\n        selectedText: this.selectedText,\r\n        comment: this.commentInput,\r\n        occurrence,     // 第几处匹配\r\n        // 你还可以保存 startContainerPath / offset 等  \r\n      };\r\n\r\n      this.annotations.push(newAnnotation);\r\n      this.clearSelection();\r\n    },\r\n\r\n    // 把文本的第 n 处匹配替换成 replacement\r\n    replaceNth(content, searchPattern, replacement, n) {\r\n      let i = 0;\r\n      return content.replace(new RegExp(searchPattern, 'g'), match => {\r\n        i++;\r\n        return i === n ? replacement : match;\r\n      });\r\n    },\r\n\r\n    // 转义正则特殊字符\r\n    escapeRegExp(string) {\r\n      return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n    },\r\n\r\n    // 还原时，可根据 data-id + data-occurrence 找到正确元素\r\n    scrollToAnnotation(annotation) {\r\n      // 通过 occurrence 精准匹配\r\n      const selector = `[data-id=\"${annotation.id}\"][data-occurrence=\"${annotation.occurrence}\"]`\r\n      const element = this.$el.querySelector(selector)\r\n      if (element) element.scrollIntoView({ behavior: 'smooth' })\r\n    },\r\n\r\n    cancelAnnotation() {\r\n      this.clearSelection();\r\n    },\r\n\r\n    clearSelection() {\r\n      this.showCommentInput = false;\r\n      this.commentInput = '';\r\n      window.getSelection().removeAllRanges();\r\n    },\r\n\r\n    // 将DOM节点路径转换为可序列化的路径\r\n    getNodePath(node) {\r\n      const path = [];\r\n      while (node.parentNode) {\r\n        path.push(Array.prototype.indexOf.call(node.parentNode.childNodes, node));\r\n        node = node.parentNode;\r\n      }\r\n      return path;\r\n    },\r\n\r\n    // 从序列化字符串加载批注\r\n    loadAnnotations(serialized) {\r\n      try {\r\n        this.annotations = JSON.parse(serialized).map(anno => ({\r\n          ...anno,\r\n          range: this.restoreRange(anno)\r\n        }));\r\n      } catch (e) {\r\n        console.error('解析批注失败:', e);\r\n      }\r\n    },\r\n\r\n    // 还原Range对象\r\n    restoreRange(annotation) {\r\n      const range = document.createRange();\r\n\r\n      let startNode = document.body;\r\n      annotation.startContainerPath.reverse().forEach(index => {\r\n        startNode = startNode.childNodes[index];\r\n      });\r\n\r\n      let endNode = document.body;\r\n      annotation.endContainerPath.reverse().forEach(index => {\r\n        endNode = endNode.childNodes[index];\r\n      });\r\n\r\n      range.setStart(startNode, annotation.startOffset);\r\n      range.setEnd(endNode, annotation.endOffset);\r\n      return range;\r\n    },\r\n\r\n    scrollToAnnotation(annotation) {\r\n      const element = document.querySelector(`[data-id=\"${annotation.id}\"]`);\r\n      if (element) {\r\n        element.scrollIntoView({ behavior: 'smooth' });\r\n      }\r\n    },\r\n    generateLines(diffs) {\r\n      let oldLineNum = 1\r\n      let newLineNum = 1\r\n      const oldLines = []\r\n      const newLines = []\r\n\r\n      console.log(diffs)\r\n      // 安全遍历差异\r\n      diffs.forEach(diff => {\r\n        const type = diff[0]\r\n        const content = diff[1]\r\n\r\n        const lines = content.split('\\n').filter(l => l !== '')\r\n\r\n        console.log('处理差异:', lines)\r\n        switch (type) {\r\n          case 1:\r\n            oldLines.push({\r\n              content: content,\r\n              oldNum: oldLineNum++,\r\n              type: 'removed'\r\n            })\r\n            newLines.push({ type: 'empty' })\r\n            break\r\n\r\n          case -1:\r\n            newLines.push({\r\n              content: content,\r\n              newNum: newLineNum++,\r\n              type: 'added'\r\n            })\r\n            oldLines.push({ type: 'empty' })\r\n            break\r\n\r\n          default:  // DIFF_EQUAL\r\n            oldLines.push({\r\n              content: content,\r\n              oldNum: oldLineNum++,\r\n              type: 'same'\r\n            })\r\n            newLines.push({\r\n              content: content,\r\n              newNum: newLineNum++,\r\n              type: 'same'\r\n            })\r\n        }\r\n      })\r\n      this.oldLines = oldLines\r\n      this.newLines = newLines\r\n      console.log(this.oldLines)\r\n      console.log(this.newLines)\r\n      console.log('-------------------------------------')\r\n      this.oldLines = this.splitByNewline(this.oldLines)\r\n      this.newLines = this.splitByNewline(this.newLines)\r\n      console.log(this.oldLines)\r\n      console.log(this.newLines)\r\n    },\r\n    splitByNewline(items) {\r\n      const result = [];\r\n      let counter = 0;\r\n\r\n      // 如果输入数组中已有 newNum，就从最大的开始+1，否则从1开始\r\n      if (items.length > 0) {\r\n        const maxNum = Math.max(...items.map(it => it.newNum));\r\n        counter = maxNum + 1;\r\n      } else {\r\n        counter = 1;\r\n      }\r\n\r\n      // 正则：匹配所有换行表现\r\n      const newlineRe = /(\\r\\n|\\r|\\n)/;\r\n\r\n      items.forEach(item => {\r\n        const { content, type } = item;\r\n\r\n        // 如果内容中没有换行，直接原封不动推入\r\n        if (!newlineRe.test(content)) {\r\n          result.push({ content, newNum: counter++, type });\r\n          return;\r\n        }\r\n\r\n        // 否则先按换行分割并保留分隔符\r\n        const parts = content.split(newlineRe);\r\n\r\n        parts.forEach(token => {\r\n          if (newlineRe.test(token)) {\r\n            // 遇到换行符，插入一个空 content 的 enter 元素\r\n            result.push({\r\n              content: '',\r\n              newNum: counter++,\r\n              type: 'enter'\r\n            });\r\n          } else if (token.length > 0) {\r\n            // 普通文本段落\r\n            result.push({\r\n              content: token,\r\n              newNum: counter++,\r\n              type: type  // 保持原来元素的 type，比如 'same'\r\n            });\r\n          }\r\n          // 如果 token 既不是换行也为空串，就跳过\r\n        });\r\n      });\r\n\r\n      return result;\r\n    },\r\n    handleTextSelection() {\r\n      const selection = window.getSelection();\r\n      if (!selection.rangeCount) return;\r\n      const range = selection.getRangeAt(0);\r\n      const selectedText = range.toString().trim();\r\n      if (selectedText) {\r\n        this.selectedText = selectedText;\r\n        this.selectedRange = range;\r\n        this.showCommentInput = true;\r\n      }\r\n    },\r\n\r\n  }\r\n};\r\n</script>\r\n  \r\n<style>\r\n.container {\r\n  display: flex;\r\n  margin: 0 auto;\r\n}\r\n\r\n.article-content {\r\n  flex: 2;\r\n  padding: 20px;\r\n  line-height: 1.6;\r\n  border-right: 1px solid #ccc;\r\n}\r\n\r\n.annotations-list {\r\n  flex: 1;\r\n  padding: 20px;\r\n}\r\n\r\n.highlight {\r\n  background-color: #ffeb3b;\r\n  cursor: pointer;\r\n}\r\n\r\n.annotation-modal {\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background: white;\r\n  padding: 20px;\r\n  border: 1px solid #ccc;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  z-index: 1000;\r\n}\r\n\r\n.annotation-item {\r\n  margin-bottom: 15px;\r\n  padding: 10px;\r\n  border: 1px solid #eee;\r\n}\r\n\r\n:host {\r\n  display: block;\r\n  height: 100%;\r\n}\r\n\r\n.diff-page,\r\n.container {\r\n  overflow-y: auto;\r\n  max-height: 90vh;\r\n}\r\n\r\n.diff-page {\r\n  display: flex;\r\n  gap: 20px;\r\n  padding: 20px;\r\n  font-family: monospace;\r\n}\r\n\r\n.diff-column {\r\n  flex: 1;\r\n  border: 1px solid #e1e4e8;\r\n  border-radius: 6px;\r\n}\r\n\r\n.header {\r\n  padding: 10px;\r\n  background: #f6f8fa;\r\n  border-bottom: 1px solid #e1e4e8;\r\n  font-weight: bold;\r\n}\r\n\r\n.line {\r\n  display: flex;\r\n  /* padding: 2px 10px; */\r\n}\r\n\r\n.diff-column .line {\r\n  display: inline;\r\n  /* 或者 display: inline; */\r\n  /* 如果想控制各行之间少许间距，可加 margin-right */\r\n  /* margin-right: 8px; */\r\n}\r\n\r\n.line-number {\r\n  min-width: 40px;\r\n  color: rgba(27, 31, 35, .3);\r\n  padding-right: 10px;\r\n  user-select: none;\r\n}\r\n\r\n.deleted {\r\n  background-color: #ffeef0;\r\n}\r\n\r\n.added {\r\n  background-color: #e6ffed;\r\n}\r\n\r\n.content {\r\n  white-space: pre-wrap;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  margin: 0 auto;\r\n}\r\n\r\n.article-content {\r\n  flex: 2;\r\n  padding: 20px;\r\n  line-height: 1.6;\r\n  border-right: 1px solid #ccc;\r\n}\r\n\r\n.annotations-list {\r\n  flex: 1;\r\n  padding: 20px;\r\n}\r\n\r\n.highlight {\r\n  background-color: #ffeb3b;\r\n  cursor: pointer;\r\n}\r\n\r\n.annotation-modal {\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background: white;\r\n  padding: 20px;\r\n  border: 1px solid #ccc;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  z-index: 1000;\r\n}\r\n\r\n.annotation-item {\r\n  margin-bottom: 15px;\r\n  padding: 10px;\r\n  border: 1px solid #eee;\r\n}\r\n\r\n.diff-page-wrapper {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n  padding: 20px;\r\n}\r\n\r\n.comparison-result {\r\n  border: 1px solid #e1e4e8;\r\n  border-radius: 6px;\r\n  background: #fefefe;\r\n}\r\n</style>"]}]}