{"remainingRequest":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\src\\views\\student\\practice\\ModificationCompare.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\src\\views\\student\\practice\\ModificationCompare.vue","mtime":1745329798720},{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711182484313},{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\babel-loader\\lib\\index.js","mtime":1711182482575},{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711182484313},{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\vue-loader\\lib\\index.js","mtime":1711182506214}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgeyBkaWZmX21hdGNoX3BhdGNoIH0gZnJvbSAnLi4vLi4vLi4vYXBpL2RpZmZfbWF0Y2hfcGF0Y2gnDQppbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnOw0KDQpleHBvcnQgZGVmYXVsdCB7DQogIGRhdGEoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIGRtcDogbmV3IGRpZmZfbWF0Y2hfcGF0Y2goKSwNCiAgICAgIG9sZFRleHQ6ICfljp/lp4vmlofmnKzlhoXlrrlcbuesrOS6jOihjOWOn+Wni+WGheWuuVxu56ys5LiJ6KGM5Y6f5aeL5YaF5a65JywNCiAgICAgIHBhdGNoVGV4dDogJ0BAIC0xLDMgKzEsNCBAQFxuIOWOn+Wni+aWh+acrOWGheWuuVxuLeesrOS6jOihjOWOn+Wni+WGheWuuVxuK+esrOS6jOihjOS/ruaUueWQjueahOWGheWuuVxuK+aWsOWinueahOesrOWbm+ihjOWGheWuuVxuIOesrOS4ieihjOWOn+Wni+WGheWuuVxuJywNCiAgICAgIG9sZExpbmVzOiBbXSwNCiAgICAgIG5ld0xpbmVzOiBbXSwNCiAgICAgIHNob3dEaWZmOiB0cnVlLA0KICAgICAgYXJ0aWNsZUNvbnRlbnQ6IGDov5nph4zmmK/kuIDnr4fnpLrkvovmlofnq6DlhoXlrrnvvIzljIXlkKvlpJrkuKrmrrXokL3jgILmlZnluIjlj6/ku6XpgInkuK3ku7vmhI/mlofmnKzniYfmrrXov5vooYzmibnms6jjgIINCiAgICAgICAgICDmibnms6jlip/og73pnIDopoHlh4bnoa7orrDlvZXpgInkuK3mlofmnKznmoTkvY3nva7lkozlhoXlrrnvvIzlubbmlK/mjIHlkI7nu63nmoTlsZXnpLrlkozov5jljp/jgIJgLA0KICAgICAgYW5ub3RhdGlvbnM6IFtdLA0KICAgICAgc2VsZWN0ZWRUZXh0OiAnJywNCiAgICAgIHNlbGVjdGVkUmFuZ2U6IG51bGwsDQogICAgICBjb21tZW50SW5wdXQ6ICcnLA0KICAgIH0NCiAgfSwNCiAgbW91bnRlZCgpIHsNCiAgICB0aGlzLmxvYWREYXRhKCkNCiAgICB0aGlzLnByb2Nlc3NEaWZmKCkNCg0KICB9LA0KICBjb21wdXRlZDogew0KICAgIC8vIOeUn+aIkOWMheWQq+aJueazqOagh+iusOeahOWGheWuuQ0KICAgIGFubm90YXRlZENvbnRlbnQoKSB7DQogICAgICBsZXQgY29udGVudCA9IHRoaXMuYXJ0aWNsZUNvbnRlbnQ7DQogICAgICB0aGlzLmFubm90YXRpb25zLmZvckVhY2goYW5ubyA9PiB7DQogICAgICAgIGNvbnN0IGhpZ2hsaWdodCA9IGA8c3BhbiBjbGFzcz0iaGlnaGxpZ2h0IiBkYXRhLWlkPSIke2Fubm8uaWR9Ij4ke2Fubm8uc2VsZWN0ZWRUZXh0fTwvc3Bhbj5gOw0KICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKGFubm8uc2VsZWN0ZWRUZXh0LCBoaWdobGlnaHQpOw0KICAgICAgfSk7DQogICAgICByZXR1cm4gY29udGVudDsNCiAgICB9LA0KDQogICAgLy8g5bqP5YiX5YyW5om55rOo5L+h5oGvDQogICAgc2VyaWFsaXplZEFubm90YXRpb25zKCkgew0KICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMuYW5ub3RhdGlvbnMpOw0KICAgIH0NCiAgfSwNCiAgbWV0aG9kczogew0KICAgIGFzeW5jIGxvYWREYXRhKCkgew0KICAgICAgdHJ5IHsNCiAgICAgICAgY29uc3QgbW9kaWZpY2F0aW9uID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbW9kaWZpY2F0aW9uJykpDQogICAgICAgIGNvbnNvbGUubG9nKG1vZGlmaWNhdGlvbikNCiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQoDQogICAgICAgICAgJ2h0dHA6Ly9sb2NhbGhvc3Q6OTI1MS9hcGkvbW9kaWZpY2F0aW9uL2dldERvY0J5TW9kaWZpY2F0aW9uSWQvJyArIG1vZGlmaWNhdGlvbi5kb2NJZCArICcvJyArIG1vZGlmaWNhdGlvbi5pZCwNCiAgICAgICAgKTsNCiAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpOw0KICAgICAgICB0aGlzLnBhdGNoVGV4dCA9IHJlc3BvbnNlLmRhdGEubW9kaWZpY2F0aW9uDQogICAgICAgIGNvbnN0IHJlc3BvbnNlMiA9IGF3YWl0IGF4aW9zLmdldCgNCiAgICAgICAgICAnaHR0cDovL2xvY2FsaG9zdDo5MjUxL2FwaS9kb2NzLycgKyBtb2RpZmljYXRpb24uZG9jSWQsDQogICAgICAgICk7DQogICAgICAgIHRoaXMub2xkVGV4dCA9IHJlc3BvbnNlMi5kYXRhLnR4dA0KICAgICAgICB0aGlzLmFydGljbGVDb250ZW50ID0gcmVzcG9uc2UyLmRhdGEudHh0DQogICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlMik7DQogICAgICAgIGNvbnNvbGUubG9nKCfljp/lp4vooaXkuIE6JywgdGhpcy5wYXRjaFRleHQpDQogICAgICAgIGNvbnNvbGUubG9nKCfljp/lp4vmlofmnKwnLCB0aGlzLm9sZFRleHQpDQogICAgICAgIGNvbnN0IHBhdGNoZXMgPSB0aGlzLmRtcC5wYXRjaF9mcm9tVGV4dCh0aGlzLnBhdGNoVGV4dCkNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICBjb25zdCByZXNwb25zZTMgPSBhd2FpdCBheGlvcy5nZXQoDQogICAgICAgICAgICAnaHR0cDovL2xvY2FsaG9zdDo5MjUxL2FwaS9tYXJraW5nL2dldEJ5RG9jSWQvJyArIG1vZGlmaWNhdGlvbi5kb2NJZCwNCiAgICAgICAgICApOw0KICAgICAgICAgIGNvbnNvbGUubG9nKG1vZGlmaWNhdGlvbi5kb2NJZCk7DQogICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UzKQ0KICAgICAgICAgIHRoaXMuYW5ub3RhdGlvbnMgPSBKU09OLnBhcnNlKHJlc3BvbnNlMy5kYXRhLm1hcmtpbmcpDQogICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7DQogICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpDQogICAgICAgIH0NCiAgICAgICAgY29uc29sZS5sb2codGhpcy5hbm5vdGF0aW9ucykNCiAgICAgICAgLy8g5bqU55So6KGl5LiB5bm26aqM6K+B57uT5p6cDQogICAgICAgIGNvbnN0IFtuZXdUZXh0LCByZXN1bHRzXSA9IHRoaXMuZG1wLnBhdGNoX2FwcGx5KHBhdGNoZXMsIHRoaXMub2xkVGV4dCkNCiAgICAgICAgaWYgKHJlc3VsdHMuc29tZShzdWNjZXNzID0+ICFzdWNjZXNzKSkgew0KICAgICAgICAgIHRocm93IG5ldyBFcnJvcign6YOo5YiG6KGl5LiB5bqU55So5aSx6LSlJykNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIGNvbnNvbGUubG9nKCflupTnlKjooaXkuIHlkI7nmoTmlrDmlofmnKw6JywgbmV3VGV4dCkNCg0KICAgICAgICAvLyDnlJ/miJDmoIflh4blt67lvIINCiAgICAgICAgY29uc3QgZGlmZnMgPSB0aGlzLmRtcC5kaWZmX21haW4odGhpcy5vbGRUZXh0LCBuZXdUZXh0KQ0KICAgICAgICB0aGlzLmRtcC5kaWZmX2NsZWFudXBTZW1hbnRpYyhkaWZmcykgIC8vIOS8mOWMluW3ruW8guaYvuekug0KDQogICAgICAgIGNvbnNvbGUubG9nKCfmoIflh4blt67lvII6JywgIUFycmF5LmlzQXJyYXkoZGlmZnMpLCAhQXJyYXkuaXNBcnJheShkaWZmcykgfHwgZGlmZnMubGVuZ3RoIDwgMikNCiAgICAgICAgLy8g5aSE55CG5beu5byC57uT5p6cDQogICAgICAgIHRoaXMuZ2VuZXJhdGVMaW5lcyhkaWZmcykNCiAgICAgICAgLy8gdGhpcy5wYWdpbmF0aW9uLnRvdGFsID0gcmVzcG9uc2UuZGF0YS5kYXRhLnRvdGFsIHx8IDA7DQogICAgICB9IGNhdGNoIChlcnJvcikgew0KICAgICAgICBjb25zb2xlLmVycm9yKCfor7fmsYLlvILluLg6JywgZXJyb3IpOw0KICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfmlbDmja7liqDovb3lpLHotKUnKTsNCiAgICAgIH0NCiAgICB9LA0KICAgIC8vIGFzeW5jIHByb2Nlc3NEaWZmKCkgew0KICAgIC8vICAgICB0cnkgew0KICAgIC8vICAgICAgICAgLy8g6Kej5p6Q6KGl5LiBDQogICAgLy8gICAgICAgICBjb25zb2xlLmxvZygn5Y6f5aeL6KGl5LiBOicsIHRoaXMucGF0Y2hUZXh0KQ0KICAgIC8vICAgICAgICAgY29uc29sZS5sb2coJ+WOn+Wni+aWh+acrCcsIHRoaXMub2xkVGV4dCkNCiAgICAvLyAgICAgICAgIGNvbnN0IHBhdGNoZXMgPSB0aGlzLmRtcC5wYXRjaF9mcm9tVGV4dCh0aGlzLnBhdGNoVGV4dCkNCg0KICAgIC8vICAgICAgICAgLy8g5bqU55So6KGl5LiB5bm26aqM6K+B57uT5p6cDQogICAgLy8gICAgICAgICBjb25zdCBbbmV3VGV4dCwgcmVzdWx0c10gPSB0aGlzLmRtcC5wYXRjaF9hcHBseShwYXRjaGVzLCB0aGlzLm9sZFRleHQpDQogICAgLy8gICAgICAgICBpZiAocmVzdWx0cy5zb21lKHN1Y2Nlc3MgPT4gIXN1Y2Nlc3MpKSB7DQogICAgLy8gICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfpg6jliIbooaXkuIHlupTnlKjlpLHotKUnKQ0KICAgIC8vICAgICAgICAgfQ0KDQogICAgLy8gICAgICAgICBjb25zb2xlLmxvZygn5bqU55So6KGl5LiB5ZCO55qE5paw5paH5pysOicsIG5ld1RleHQpDQoNCiAgICAvLyAgICAgICAgIC8vIOeUn+aIkOagh+WHhuW3ruW8gg0KICAgIC8vICAgICAgICAgY29uc3QgZGlmZnMgPSB0aGlzLmRtcC5kaWZmX21haW4odGhpcy5vbGRUZXh0LCBuZXdUZXh0KQ0KICAgIC8vICAgICAgICAgdGhpcy5kbXAuZGlmZl9jbGVhbnVwU2VtYW50aWMoZGlmZnMpICAvLyDkvJjljJblt67lvILmmL7npLoNCg0KICAgIC8vICAgICAgICAgY29uc29sZS5sb2coJ+agh+WHhuW3ruW8gjonLCAhQXJyYXkuaXNBcnJheShkaWZmcyksICFBcnJheS5pc0FycmF5KGRpZmZzKSB8fCBkaWZmcy5sZW5ndGggPCAyKQ0KICAgIC8vICAgICAgICAgLy8g5aSE55CG5beu5byC57uT5p6cDQogICAgLy8gICAgICAgICB0aGlzLmdlbmVyYXRlTGluZXMoZGlmZnMpDQogICAgLy8gICAgIH0gY2F0Y2ggKGVycm9yKSB7DQogICAgLy8gICAgICAgICBjb25zb2xlLmVycm9yKCflpITnkIblt67lvILlpLHotKU6JywgZXJyb3IpDQogICAgLy8gICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKGDniYjmnKzlr7nmr5TlpLHotKU6ICR7ZXJyb3IubWVzc2FnZX1gKQ0KICAgIC8vICAgICB9DQogICAgLy8gfSwNCg0KICAgIGdlbmVyYXRlTGluZXMoZGlmZnMpIHsNCiAgICAgIGxldCBvbGRMaW5lTnVtID0gMQ0KICAgICAgbGV0IG5ld0xpbmVOdW0gPSAxDQogICAgICBjb25zdCBvbGRMaW5lcyA9IFtdDQogICAgICBjb25zdCBuZXdMaW5lcyA9IFtdDQoNCiAgICAgIGNvbnNvbGUubG9nKGRpZmZzKQ0KICAgICAgLy8g5a6J5YWo6YGN5Y6G5beu5byCDQogICAgICBkaWZmcy5mb3JFYWNoKGRpZmYgPT4gew0KICAgICAgICAvLyDmt7vliqDnsbvlnovmo4Dmn6UNCiAgICAgICAgLy8gaWYgKCFBcnJheS5pc0FycmF5KGRpZmYpIHx8IGRpZmYubGVuZ3RoIDwgMikgDQogICAgICAgIC8vIHsNCiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKCfmnKrlronlhajpgJrov4fnsbvlnovmo4Dmn6UnLCBkaWZmKQ0KICAgICAgICAvLyAgICAgcmV0dXJuDQogICAgICAgIC8vIH0NCiAgICAgICAgLy8gY29uc29sZS5sb2coJ+WuieWFqOmAmui/h+exu+Wei+ajgOafpScsIGRpZmZbMF0pDQoNCiAgICAgICAgY29uc3QgdHlwZSA9IGRpZmZbMF0NCiAgICAgICAgY29uc3QgY29udGVudCA9IGRpZmZbMV0NCg0KDQogICAgICAgIC8vIGNvbnNvbGUubG9nKCflpITnkIblt67lvII6JywgY29udGVudCkNCiAgICAgICAgLy8gY29uc29sZS5sb2coJ3RoaXMuZG1wLkRJRkZfREVMRVRFOicsIHRoaXMuZG1wLkRJRkZfREVMRVRFKQ0KICAgICAgICAvLyBjb25zb2xlLmxvZygndGhpcy5kbXAuRElGRl9JTlNFUlQ6JywgdGhpcy5kbXAuRElGRl9JTlNFUlQpDQogICAgICAgIC8vIGNvbnNvbGUubG9nKCd0aGlzLmRtcC5ESUZGX0VRVUFMOicsIHRoaXMuZG1wLkRJRkZfRVFVQUwpDQogICAgICAgIGNvbnN0IGxpbmVzID0gY29udGVudC5zcGxpdCgnXG4nKS5maWx0ZXIobCA9PiBsICE9PSAnJykNCg0KICAgICAgICBjb25zb2xlLmxvZygn5aSE55CG5beu5byCOicsIGxpbmVzKQ0KICAgICAgICBzd2l0Y2ggKHR5cGUpIHsNCiAgICAgICAgICBjYXNlIDE6DQogICAgICAgICAgICBvbGRMaW5lcy5wdXNoKHsNCiAgICAgICAgICAgICAgY29udGVudDogY29udGVudCwNCiAgICAgICAgICAgICAgb2xkTnVtOiBvbGRMaW5lTnVtKyssDQogICAgICAgICAgICAgIHR5cGU6ICdyZW1vdmVkJw0KICAgICAgICAgICAgfSkNCiAgICAgICAgICAgIG5ld0xpbmVzLnB1c2goeyB0eXBlOiAnZW1wdHknIH0pDQogICAgICAgICAgICBicmVhaw0KDQogICAgICAgICAgY2FzZSAtMToNCiAgICAgICAgICAgIG5ld0xpbmVzLnB1c2goew0KICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50LA0KICAgICAgICAgICAgICBuZXdOdW06IG5ld0xpbmVOdW0rKywNCiAgICAgICAgICAgICAgdHlwZTogJ2FkZGVkJw0KICAgICAgICAgICAgfSkNCiAgICAgICAgICAgIG9sZExpbmVzLnB1c2goeyB0eXBlOiAnZW1wdHknIH0pDQogICAgICAgICAgICBicmVhaw0KDQogICAgICAgICAgZGVmYXVsdDogIC8vIERJRkZfRVFVQUwNCiAgICAgICAgICAgIG9sZExpbmVzLnB1c2goew0KICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50LA0KICAgICAgICAgICAgICBvbGROdW06IG9sZExpbmVOdW0rKywNCiAgICAgICAgICAgICAgdHlwZTogJ3NhbWUnDQogICAgICAgICAgICB9KQ0KICAgICAgICAgICAgbmV3TGluZXMucHVzaCh7DQogICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsDQogICAgICAgICAgICAgIG5ld051bTogbmV3TGluZU51bSsrLA0KICAgICAgICAgICAgICB0eXBlOiAnc2FtZScNCiAgICAgICAgICAgIH0pDQogICAgICAgIH0NCiAgICAgIH0pDQogICAgICB0aGlzLm9sZExpbmVzID0gb2xkTGluZXMNCiAgICAgIHRoaXMubmV3TGluZXMgPSBuZXdMaW5lcw0KICAgIH0sDQogICAgaGFuZGxlVGV4dFNlbGVjdGlvbigpIHsNCiAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTsNCiAgICAgIGlmICghc2VsZWN0aW9uLnJhbmdlQ291bnQpIHJldHVybjsNCg0KICAgICAgY29uc3QgcmFuZ2UgPSBzZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKTsNCiAgICAgIGNvbnN0IHNlbGVjdGVkVGV4dCA9IHJhbmdlLnRvU3RyaW5nKCkudHJpbSgpOw0KDQogICAgICBpZiAoc2VsZWN0ZWRUZXh0KSB7DQogICAgICAgIHRoaXMuc2VsZWN0ZWRUZXh0ID0gc2VsZWN0ZWRUZXh0Ow0KICAgICAgICB0aGlzLnNlbGVjdGVkUmFuZ2UgPSByYW5nZTsNCiAgICAgICAgdGhpcy5zaG93Q29tbWVudElucHV0ID0gdHJ1ZTsNCiAgICAgIH0NCiAgICB9LA0KDQogICAgc2F2ZUFubm90YXRpb24oKSB7DQogICAgICBpZiAoIXRoaXMuY29tbWVudElucHV0KSByZXR1cm47DQoNCiAgICAgIGNvbnN0IG5ld0Fubm90YXRpb24gPSB7DQogICAgICAgIGlkOiBEYXRlLm5vdygpLA0KICAgICAgICBzZWxlY3RlZFRleHQ6IHRoaXMuc2VsZWN0ZWRUZXh0LA0KICAgICAgICBjb21tZW50OiB0aGlzLmNvbW1lbnRJbnB1dCwNCiAgICAgICAgc3RhcnRPZmZzZXQ6IHRoaXMuc2VsZWN0ZWRSYW5nZS5zdGFydE9mZnNldCwNCiAgICAgICAgZW5kT2Zmc2V0OiB0aGlzLnNlbGVjdGVkUmFuZ2UuZW5kT2Zmc2V0LA0KICAgICAgICBzdGFydENvbnRhaW5lclBhdGg6IHRoaXMuZ2V0Tm9kZVBhdGgodGhpcy5zZWxlY3RlZFJhbmdlLnN0YXJ0Q29udGFpbmVyKSwNCiAgICAgICAgZW5kQ29udGFpbmVyUGF0aDogdGhpcy5nZXROb2RlUGF0aCh0aGlzLnNlbGVjdGVkUmFuZ2UuZW5kQ29udGFpbmVyKQ0KICAgICAgfTsNCg0KICAgICAgdGhpcy5hbm5vdGF0aW9ucy5wdXNoKG5ld0Fubm90YXRpb24pOw0KICAgICAgdGhpcy5jbGVhclNlbGVjdGlvbigpOw0KICAgIH0sDQoNCiAgICBjYW5jZWxBbm5vdGF0aW9uKCkgew0KICAgICAgdGhpcy5jbGVhclNlbGVjdGlvbigpOw0KICAgIH0sDQoNCiAgICBjbGVhclNlbGVjdGlvbigpIHsNCiAgICAgIHRoaXMuc2hvd0NvbW1lbnRJbnB1dCA9IGZhbHNlOw0KICAgICAgdGhpcy5jb21tZW50SW5wdXQgPSAnJzsNCiAgICAgIHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKTsNCiAgICB9LA0KDQogICAgLy8g5bCGRE9N6IqC54K56Lev5b6E6L2s5o2i5Li65Y+v5bqP5YiX5YyW55qE6Lev5b6EDQogICAgZ2V0Tm9kZVBhdGgobm9kZSkgew0KICAgICAgY29uc3QgcGF0aCA9IFtdOw0KICAgICAgd2hpbGUgKG5vZGUucGFyZW50Tm9kZSkgew0KICAgICAgICBwYXRoLnB1c2goQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChub2RlLnBhcmVudE5vZGUuY2hpbGROb2Rlcywgbm9kZSkpOw0KICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlOw0KICAgICAgfQ0KICAgICAgcmV0dXJuIHBhdGg7DQogICAgfSwNCg0KICAgIC8vIOS7juW6j+WIl+WMluWtl+espuS4suWKoOi9veaJueazqA0KICAgIGxvYWRBbm5vdGF0aW9ucyhzZXJpYWxpemVkKSB7DQogICAgICB0cnkgew0KICAgICAgICB0aGlzLmFubm90YXRpb25zID0gSlNPTi5wYXJzZShzZXJpYWxpemVkKS5tYXAoYW5ubyA9PiAoew0KICAgICAgICAgIC4uLmFubm8sDQogICAgICAgICAgcmFuZ2U6IHRoaXMucmVzdG9yZVJhbmdlKGFubm8pDQogICAgICAgIH0pKTsNCiAgICAgIH0gY2F0Y2ggKGUpIHsNCiAgICAgICAgY29uc29sZS5lcnJvcign6Kej5p6Q5om55rOo5aSx6LSlOicsIGUpOw0KICAgICAgfQ0KICAgIH0sDQoNCiAgICAvLyDov5jljp9SYW5nZeWvueixoQ0KICAgIHJlc3RvcmVSYW5nZShhbm5vdGF0aW9uKSB7DQogICAgICBjb25zdCByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7DQoNCiAgICAgIGxldCBzdGFydE5vZGUgPSBkb2N1bWVudC5ib2R5Ow0KICAgICAgYW5ub3RhdGlvbi5zdGFydENvbnRhaW5lclBhdGgucmV2ZXJzZSgpLmZvckVhY2goaW5kZXggPT4gew0KICAgICAgICBzdGFydE5vZGUgPSBzdGFydE5vZGUuY2hpbGROb2Rlc1tpbmRleF07DQogICAgICB9KTsNCg0KICAgICAgbGV0IGVuZE5vZGUgPSBkb2N1bWVudC5ib2R5Ow0KICAgICAgYW5ub3RhdGlvbi5lbmRDb250YWluZXJQYXRoLnJldmVyc2UoKS5mb3JFYWNoKGluZGV4ID0+IHsNCiAgICAgICAgZW5kTm9kZSA9IGVuZE5vZGUuY2hpbGROb2Rlc1tpbmRleF07DQogICAgICB9KTsNCg0KICAgICAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnROb2RlLCBhbm5vdGF0aW9uLnN0YXJ0T2Zmc2V0KTsNCiAgICAgIHJhbmdlLnNldEVuZChlbmROb2RlLCBhbm5vdGF0aW9uLmVuZE9mZnNldCk7DQogICAgICByZXR1cm4gcmFuZ2U7DQogICAgfSwNCg0KICAgIHNjcm9sbFRvQW5ub3RhdGlvbihhbm5vdGF0aW9uKSB7DQogICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtaWQ9IiR7YW5ub3RhdGlvbi5pZH0iXWApOw0KICAgICAgaWYgKGVsZW1lbnQpIHsNCiAgICAgICAgZWxlbWVudC5zY3JvbGxJbnRvVmlldyh7IGJlaGF2aW9yOiAnc21vb3RoJyB9KTsNCiAgICAgIH0NCiAgICB9DQogIH0NCn0NCg=="},{"version":3,"sources":["ModificationCompare.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ModificationCompare.vue","sourceRoot":"src/views/student/practice","sourcesContent":["<template>\r\n  <div>\r\n    <el-switch v-model=\"showDiff\" class=\"ml-2\" inline-prompt\r\n      style=\"--el-switch-on-color: #13ce66; --el-switch-off-color: #ff4949\" active-text=\"论文版本显示\" inactive-text=\"论文批注显示\" />\r\n    <div v-if=\"showDiff\" class=\"diff-page\">\r\n      <!-- 旧版本 -->\r\n      <div class=\"diff-column\">\r\n        <div class=\"header\">旧版本</div>\r\n        <div v-for=\"(line, index) in oldLines\" :key=\"'old-' + index\" class=\"line\"\r\n          :class=\"{ 'deleted': line.type === 'removed' }\">\r\n          <span class=\"line-number\">{{ line.oldNum || ' ' }}</span>\r\n          <span class=\"content\">{{ line.content }}</span>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 新版本 -->\r\n      <div class=\"diff-column\">\r\n        <div class=\"header\">新版本</div>\r\n        <div v-for=\"(line, index) in newLines\" :key=\"'new-' + index\" class=\"line\"\r\n          :class=\"{ 'added': line.type === 'added' }\">\r\n          <span class=\"line-number\">{{ line.newNum || ' ' }}</span>\r\n          <span class=\"content\">{{ line.content }}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div v-else class=\"container\">\r\n      <!-- 文章内容区域 -->\r\n      <div class=\"article-content\" @mouseup=\"handleTextSelection\" v-html=\"annotatedContent\"></div>\r\n      <!-- 批注展示 -->\r\n      <div class=\"annotations-list\">\r\n        <div v-for=\"(annotation, index) in annotations\" :key=\"index\" class=\"annotation-item\">\r\n          <span class=\"highlight\" @click=\"scrollToAnnotation(annotation)\">\r\n            {{ annotation.selectedText }}\r\n          </span>\r\n          <div class=\"comment\">{{ annotation.comment }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nimport { diff_match_patch } from '../../../api/diff_match_patch'\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      dmp: new diff_match_patch(),\r\n      oldText: '原始文本内容\\n第二行原始内容\\n第三行原始内容',\r\n      patchText: '@@ -1,3 +1,4 @@\\n 原始文本内容\\n-第二行原始内容\\n+第二行修改后的内容\\n+新增的第四行内容\\n 第三行原始内容\\n',\r\n      oldLines: [],\r\n      newLines: [],\r\n      showDiff: true,\r\n      articleContent: `这里是一篇示例文章内容，包含多个段落。教师可以选中任意文本片段进行批注。\r\n          批注功能需要准确记录选中文本的位置和内容，并支持后续的展示和还原。`,\r\n      annotations: [],\r\n      selectedText: '',\r\n      selectedRange: null,\r\n      commentInput: '',\r\n    }\r\n  },\r\n  mounted() {\r\n    this.loadData()\r\n    this.processDiff()\r\n\r\n  },\r\n  computed: {\r\n    // 生成包含批注标记的内容\r\n    annotatedContent() {\r\n      let content = this.articleContent;\r\n      this.annotations.forEach(anno => {\r\n        const highlight = `<span class=\"highlight\" data-id=\"${anno.id}\">${anno.selectedText}</span>`;\r\n        content = content.replace(anno.selectedText, highlight);\r\n      });\r\n      return content;\r\n    },\r\n\r\n    // 序列化批注信息\r\n    serializedAnnotations() {\r\n      return JSON.stringify(this.annotations);\r\n    }\r\n  },\r\n  methods: {\r\n    async loadData() {\r\n      try {\r\n        const modification = JSON.parse(localStorage.getItem('modification'))\r\n        console.log(modification)\r\n        const response = await axios.get(\r\n          'http://localhost:9251/api/modification/getDocByModificationId/' + modification.docId + '/' + modification.id,\r\n        );\r\n        console.log(response);\r\n        this.patchText = response.data.modification\r\n        const response2 = await axios.get(\r\n          'http://localhost:9251/api/docs/' + modification.docId,\r\n        );\r\n        this.oldText = response2.data.txt\r\n        this.articleContent = response2.data.txt\r\n        console.log(response2);\r\n        console.log('原始补丁:', this.patchText)\r\n        console.log('原始文本', this.oldText)\r\n        const patches = this.dmp.patch_fromText(this.patchText)\r\n        try {\r\n          const response3 = await axios.get(\r\n            'http://localhost:9251/api/marking/getByDocId/' + modification.docId,\r\n          );\r\n          console.log(modification.docId);\r\n          console.log(response3)\r\n          this.annotations = JSON.parse(response3.data.marking)\r\n        } catch (error) {\r\n          console.log(error)\r\n        }\r\n        console.log(this.annotations)\r\n        // 应用补丁并验证结果\r\n        const [newText, results] = this.dmp.patch_apply(patches, this.oldText)\r\n        if (results.some(success => !success)) {\r\n          throw new Error('部分补丁应用失败')\r\n        }\r\n\r\n        // console.log('应用补丁后的新文本:', newText)\r\n\r\n        // 生成标准差异\r\n        const diffs = this.dmp.diff_main(this.oldText, newText)\r\n        this.dmp.diff_cleanupSemantic(diffs)  // 优化差异显示\r\n\r\n        console.log('标准差异:', !Array.isArray(diffs), !Array.isArray(diffs) || diffs.length < 2)\r\n        // 处理差异结果\r\n        this.generateLines(diffs)\r\n        // this.pagination.total = response.data.data.total || 0;\r\n      } catch (error) {\r\n        console.error('请求异常:', error);\r\n        this.$message.error('数据加载失败');\r\n      }\r\n    },\r\n    // async processDiff() {\r\n    //     try {\r\n    //         // 解析补丁\r\n    //         console.log('原始补丁:', this.patchText)\r\n    //         console.log('原始文本', this.oldText)\r\n    //         const patches = this.dmp.patch_fromText(this.patchText)\r\n\r\n    //         // 应用补丁并验证结果\r\n    //         const [newText, results] = this.dmp.patch_apply(patches, this.oldText)\r\n    //         if (results.some(success => !success)) {\r\n    //             throw new Error('部分补丁应用失败')\r\n    //         }\r\n\r\n    //         console.log('应用补丁后的新文本:', newText)\r\n\r\n    //         // 生成标准差异\r\n    //         const diffs = this.dmp.diff_main(this.oldText, newText)\r\n    //         this.dmp.diff_cleanupSemantic(diffs)  // 优化差异显示\r\n\r\n    //         console.log('标准差异:', !Array.isArray(diffs), !Array.isArray(diffs) || diffs.length < 2)\r\n    //         // 处理差异结果\r\n    //         this.generateLines(diffs)\r\n    //     } catch (error) {\r\n    //         console.error('处理差异失败:', error)\r\n    //         this.$message.error(`版本对比失败: ${error.message}`)\r\n    //     }\r\n    // },\r\n\r\n    generateLines(diffs) {\r\n      let oldLineNum = 1\r\n      let newLineNum = 1\r\n      const oldLines = []\r\n      const newLines = []\r\n\r\n      console.log(diffs)\r\n      // 安全遍历差异\r\n      diffs.forEach(diff => {\r\n        // 添加类型检查\r\n        // if (!Array.isArray(diff) || diff.length < 2) \r\n        // {\r\n        //     console.log('未安全通过类型检查', diff)\r\n        //     return\r\n        // }\r\n        // console.log('安全通过类型检查', diff[0])\r\n\r\n        const type = diff[0]\r\n        const content = diff[1]\r\n\r\n\r\n        // console.log('处理差异:', content)\r\n        // console.log('this.dmp.DIFF_DELETE:', this.dmp.DIFF_DELETE)\r\n        // console.log('this.dmp.DIFF_INSERT:', this.dmp.DIFF_INSERT)\r\n        // console.log('this.dmp.DIFF_EQUAL:', this.dmp.DIFF_EQUAL)\r\n        const lines = content.split('\\n').filter(l => l !== '')\r\n\r\n        console.log('处理差异:', lines)\r\n        switch (type) {\r\n          case 1:\r\n            oldLines.push({\r\n              content: content,\r\n              oldNum: oldLineNum++,\r\n              type: 'removed'\r\n            })\r\n            newLines.push({ type: 'empty' })\r\n            break\r\n\r\n          case -1:\r\n            newLines.push({\r\n              content: content,\r\n              newNum: newLineNum++,\r\n              type: 'added'\r\n            })\r\n            oldLines.push({ type: 'empty' })\r\n            break\r\n\r\n          default:  // DIFF_EQUAL\r\n            oldLines.push({\r\n              content: content,\r\n              oldNum: oldLineNum++,\r\n              type: 'same'\r\n            })\r\n            newLines.push({\r\n              content: content,\r\n              newNum: newLineNum++,\r\n              type: 'same'\r\n            })\r\n        }\r\n      })\r\n      this.oldLines = oldLines\r\n      this.newLines = newLines\r\n    },\r\n    handleTextSelection() {\r\n      const selection = window.getSelection();\r\n      if (!selection.rangeCount) return;\r\n\r\n      const range = selection.getRangeAt(0);\r\n      const selectedText = range.toString().trim();\r\n\r\n      if (selectedText) {\r\n        this.selectedText = selectedText;\r\n        this.selectedRange = range;\r\n        this.showCommentInput = true;\r\n      }\r\n    },\r\n\r\n    saveAnnotation() {\r\n      if (!this.commentInput) return;\r\n\r\n      const newAnnotation = {\r\n        id: Date.now(),\r\n        selectedText: this.selectedText,\r\n        comment: this.commentInput,\r\n        startOffset: this.selectedRange.startOffset,\r\n        endOffset: this.selectedRange.endOffset,\r\n        startContainerPath: this.getNodePath(this.selectedRange.startContainer),\r\n        endContainerPath: this.getNodePath(this.selectedRange.endContainer)\r\n      };\r\n\r\n      this.annotations.push(newAnnotation);\r\n      this.clearSelection();\r\n    },\r\n\r\n    cancelAnnotation() {\r\n      this.clearSelection();\r\n    },\r\n\r\n    clearSelection() {\r\n      this.showCommentInput = false;\r\n      this.commentInput = '';\r\n      window.getSelection().removeAllRanges();\r\n    },\r\n\r\n    // 将DOM节点路径转换为可序列化的路径\r\n    getNodePath(node) {\r\n      const path = [];\r\n      while (node.parentNode) {\r\n        path.push(Array.prototype.indexOf.call(node.parentNode.childNodes, node));\r\n        node = node.parentNode;\r\n      }\r\n      return path;\r\n    },\r\n\r\n    // 从序列化字符串加载批注\r\n    loadAnnotations(serialized) {\r\n      try {\r\n        this.annotations = JSON.parse(serialized).map(anno => ({\r\n          ...anno,\r\n          range: this.restoreRange(anno)\r\n        }));\r\n      } catch (e) {\r\n        console.error('解析批注失败:', e);\r\n      }\r\n    },\r\n\r\n    // 还原Range对象\r\n    restoreRange(annotation) {\r\n      const range = document.createRange();\r\n\r\n      let startNode = document.body;\r\n      annotation.startContainerPath.reverse().forEach(index => {\r\n        startNode = startNode.childNodes[index];\r\n      });\r\n\r\n      let endNode = document.body;\r\n      annotation.endContainerPath.reverse().forEach(index => {\r\n        endNode = endNode.childNodes[index];\r\n      });\r\n\r\n      range.setStart(startNode, annotation.startOffset);\r\n      range.setEnd(endNode, annotation.endOffset);\r\n      return range;\r\n    },\r\n\r\n    scrollToAnnotation(annotation) {\r\n      const element = document.querySelector(`[data-id=\"${annotation.id}\"]`);\r\n      if (element) {\r\n        element.scrollIntoView({ behavior: 'smooth' });\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n  \r\n<style scoped>\r\nhtml, body {\r\n  height: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n  overflow: auto;\r\n}\r\n\r\ndiv {\r\n  box-sizing: border-box;\r\n}\r\n\r\n:host {\r\n  display: block;\r\n  height: 100%;\r\n}\r\n\r\n.diff-page,\r\n.container {\r\n  overflow-y: auto;\r\n  max-height: 90vh;\r\n}\r\n\r\n.diff-page {\r\n  display: flex;\r\n  gap: 20px;\r\n  padding: 20px;\r\n  font-family: monospace;\r\n}\r\n\r\n.diff-column {\r\n  flex: 1;\r\n  border: 1px solid #e1e4e8;\r\n  border-radius: 6px;\r\n}\r\n\r\n.header {\r\n  padding: 10px;\r\n  background: #f6f8fa;\r\n  border-bottom: 1px solid #e1e4e8;\r\n  font-weight: bold;\r\n}\r\n\r\n.line {\r\n  display: flex;\r\n  padding: 2px 10px;\r\n}\r\n\r\n.line-number {\r\n  min-width: 40px;\r\n  color: rgba(27, 31, 35, .3);\r\n  padding-right: 10px;\r\n  user-select: none;\r\n}\r\n\r\n.deleted {\r\n  background-color: #ffeef0;\r\n}\r\n\r\n.added {\r\n  background-color: #e6ffed;\r\n}\r\n\r\n.content {\r\n  white-space: pre-wrap;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  margin: 0 auto;\r\n}\r\n\r\n.article-content {\r\n  flex: 2;\r\n  padding: 20px;\r\n  line-height: 1.6;\r\n  border-right: 1px solid #ccc;\r\n}\r\n\r\n.annotations-list {\r\n  flex: 1;\r\n  padding: 20px;\r\n}\r\n\r\n.highlight {\r\n  background-color: #ffeb3b;\r\n  cursor: pointer;\r\n}\r\n\r\n.annotation-modal {\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background: white;\r\n  padding: 20px;\r\n  border: 1px solid #ccc;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  z-index: 1000;\r\n}\r\n\r\n.annotation-item {\r\n  margin-bottom: 15px;\r\n  padding: 10px;\r\n  border: 1px solid #eee;\r\n}\r\n</style>"]}]}