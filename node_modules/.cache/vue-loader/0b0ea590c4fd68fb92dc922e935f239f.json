{"remainingRequest":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\src\\views\\student\\practice\\ModificationCompare.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\src\\views\\student\\practice\\ModificationCompare.vue","mtime":1746385127868},{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711182484313},{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\babel-loader\\lib\\index.js","mtime":1711182482575},{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711182484313},{"path":"C:\\Users\\18133\\Desktop\\在线学习系统\\源码\\OnlineLearnVue\\node_modules\\vue-loader\\lib\\index.js","mtime":1711182506214}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgeyBkaWZmX21hdGNoX3BhdGNoIH0gZnJvbSAnLi4vLi4vLi4vYXBpL2RpZmZfbWF0Y2hfcGF0Y2gnDQppbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnOw0KDQpleHBvcnQgZGVmYXVsdCB7DQogIGRhdGEoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIGRtcDogbmV3IGRpZmZfbWF0Y2hfcGF0Y2goKSwNCiAgICAgIG9sZFRleHQ6ICfljp/lp4vmlofmnKzlhoXlrrlcbuesrOS6jOihjOWOn+Wni+WGheWuuVxu56ys5LiJ6KGM5Y6f5aeL5YaF5a65JywNCiAgICAgIHBhdGNoVGV4dDogJ0BAIC0xLDMgKzEsNCBAQFxuIOWOn+Wni+aWh+acrOWGheWuuVxuLeesrOS6jOihjOWOn+Wni+WGheWuuVxuK+esrOS6jOihjOS/ruaUueWQjueahOWGheWuuVxuK+aWsOWinueahOesrOWbm+ihjOWGheWuuVxuIOesrOS4ieihjOWOn+Wni+WGheWuuVxuJywNCiAgICAgIG9sZExpbmVzOiBbXSwNCiAgICAgIG5ld0xpbmVzOiBbXSwNCiAgICAgIHNob3dEaWZmOiB0cnVlLA0KICAgICAgYXJ0aWNsZUNvbnRlbnQ6IGDov5nph4zmmK/kuIDnr4fnpLrkvovmlofnq6DlhoXlrrnvvIzljIXlkKvlpJrkuKrmrrXokL3jgILmlZnluIjlj6/ku6XpgInkuK3ku7vmhI/mlofmnKzniYfmrrXov5vooYzmibnms6jjgIINCiAgICAgICAgICDmibnms6jlip/og73pnIDopoHlh4bnoa7orrDlvZXpgInkuK3mlofmnKznmoTkvY3nva7lkozlhoXlrrnvvIzlubbmlK/mjIHlkI7nu63nmoTlsZXnpLrlkozov5jljp/jgIJgLA0KICAgICAgYW5ub3RhdGlvbnM6IFtdLA0KICAgICAgc2VsZWN0ZWRUZXh0OiAnJywNCiAgICAgIHNlbGVjdGVkUmFuZ2U6IG51bGwsDQogICAgICBjb21tZW50SW5wdXQ6ICcnLA0KICAgIH0NCiAgfSwNCiAgbW91bnRlZCgpIHsNCiAgICB0aGlzLmxvYWREYXRhKCkNCiAgICB0aGlzLnByb2Nlc3NEaWZmKCkNCg0KICB9LA0KICBjb21wdXRlZDogew0KICAgIC8vIOeUn+aIkOWMheWQq+aJueazqOagh+iusOeahOWGheWuuQ0KICAgIGFubm90YXRlZENvbnRlbnQoKSB7DQogICAgICBsZXQgY29udGVudCA9IHRoaXMuYXJ0aWNsZUNvbnRlbnQ7DQogICAgICB0aGlzLmFubm90YXRpb25zLmZvckVhY2goYW5ubyA9PiB7DQogICAgICAgIGNvbnN0IGhpZ2hsaWdodCA9IGA8c3BhbiBjbGFzcz0iaGlnaGxpZ2h0IiBkYXRhLWlkPSIke2Fubm8uaWR9Ij4ke2Fubm8uc2VsZWN0ZWRUZXh0fTwvc3Bhbj5gOw0KICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKGFubm8uc2VsZWN0ZWRUZXh0LCBoaWdobGlnaHQpOw0KICAgICAgfSk7DQogICAgICByZXR1cm4gY29udGVudDsNCiAgICB9LA0KICAgIC8vIOW6j+WIl+WMluaJueazqOS/oeaBrw0KICAgIHNlcmlhbGl6ZWRBbm5vdGF0aW9ucygpIHsNCiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLmFubm90YXRpb25zKTsNCiAgICB9DQogIH0sDQogIG1ldGhvZHM6IHsNCiAgICBzY3JvbGxUb09sZChhbm5vdGF0aW9uKSB7DQogICAgICBjb25zdCBjb250ZW50RWxzID0gdGhpcy4kZWwucXVlcnlTZWxlY3RvckFsbCgnLmRpZmYtcGFnZSAuZGlmZi1jb2x1bW46Zmlyc3QtY2hpbGQgLmNvbnRlbnQnKTsNCiAgICAgIGZvciAoY29uc3QgZWwgb2YgY29udGVudEVscykgew0KICAgICAgICBpZiAoZWwudGV4dENvbnRlbnQuaW5jbHVkZXMoYW5ub3RhdGlvbi5zZWxlY3RlZFRleHQpKSB7DQogICAgICAgICAgZWwuc2Nyb2xsSW50b1ZpZXcoeyBiZWhhdmlvcjogJ3Ntb290aCcsIGJsb2NrOiAnY2VudGVyJyB9KTsNCiAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCd0ZW1wLWhpZ2hsaWdodCcpOw0KICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gZWwuY2xhc3NMaXN0LnJlbW92ZSgndGVtcC1oaWdobGlnaHQnKSwgMjAwMCk7DQogICAgICAgICAgYnJlYWs7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9LA0KICAgIGFzeW5jIGxvYWREYXRhKCkgew0KICAgICAgdHJ5IHsNCiAgICAgICAgY29uc3QgbW9kaWZpY2F0aW9uID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbW9kaWZpY2F0aW9uJykpDQogICAgICAgIGNvbnN0IHByZXZNb2RpZmljYXRpb24gPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcmV2TW9kaWZpY2F0aW9uJykpDQogICAgICAgIGNvbnNvbGUubG9nKG1vZGlmaWNhdGlvbikNCiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQoDQogICAgICAgICAgJ2h0dHA6Ly9sb2NhbGhvc3Q6OTI1MS9hcGkvbW9kaWZpY2F0aW9uL2dldERvY0J5TW9kaWZpY2F0aW9uSWQvJyArIG1vZGlmaWNhdGlvbi5kb2NJZCArICcvJyArIG1vZGlmaWNhdGlvbi5pZCwNCiAgICAgICAgKTsNCiAgICAgICAgY29uc3QgbW9kaWZpY2F0aW9uTGlzdCA9IHJlc3BvbnNlLmRhdGEucmVzdWx0RGF0YQ0KICAgICAgICB0aGlzLnBhdGNoVGV4dCA9IHJlc3BvbnNlLmRhdGEubW9kaWZpY2F0aW9uDQogICAgICAgIGNvbnNvbGUubG9nKG1vZGlmaWNhdGlvbkxpc3QpDQogICAgICAgIGNvbnN0IHJlc3BvbnNlMiA9IGF3YWl0IGF4aW9zLmdldCgNCiAgICAgICAgICAnaHR0cDovL2xvY2FsaG9zdDo5MjUxL2FwaS9kb2NzLycgKyBtb2RpZmljYXRpb24uZG9jSWQsDQogICAgICAgICk7DQogICAgICAgIHRoaXMub2xkVGV4dCA9IHJlc3BvbnNlMi5kYXRhLnR4dA0KICAgICAgICBsZXQgbmV3VGV4dCA9IHJlc3BvbnNlMi5kYXRhLnR4dA0KICAgICAgICB0aGlzLmFydGljbGVDb250ZW50ID0gcmVzcG9uc2UyLmRhdGEudHh0DQogICAgICAgIHRyeSB7DQogICAgICAgICAgY29uc3QgcmVzcG9uc2UzID0gYXdhaXQgYXhpb3MuZ2V0KA0KICAgICAgICAgICAgJ2h0dHA6Ly9sb2NhbGhvc3Q6OTI1MS9hcGkvbWFya2luZy9nZXRCeU1vZGlmaWNhdGlvbklkLycgKyBwcmV2TW9kaWZpY2F0aW9uLmlkLA0KICAgICAgICAgICk7DQogICAgICAgICAgdGhpcy5hbm5vdGF0aW9ucyA9IEpTT04ucGFyc2UocmVzcG9uc2UzLmRhdGEubWFya2luZykNCiAgICAgICAgICBjb25zb2xlLmxvZygndGhpcy5hbm5vdGF0aW9ucycpDQogICAgICAgICAgY29uc29sZS5sb2codGhpcy5hbm5vdGF0aW9ucykNCiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsNCiAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcikNCiAgICAgICAgfQ0KICAgICAgICBmb3IgKGxldCBpID0gbW9kaWZpY2F0aW9uTGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgew0KICAgICAgICAgIGNvbnN0IGRhdGEgPSBtb2RpZmljYXRpb25MaXN0W2ldOw0KICAgICAgICAgIGNvbnN0IHBhdGNoZXMgPSB0aGlzLmRtcC5wYXRjaF9mcm9tVGV4dChkYXRhLm1vZGlmaWNhdGlvbik7DQogICAgICAgICAgY29uc3QgW25leHRUZXh0LCByZXN1bHRzXSA9IHRoaXMuZG1wLnBhdGNoX2FwcGx5KHBhdGNoZXMsIG5ld1RleHQpOw0KICAgICAgICAgIHRoaXMNCiAgICAgICAgICBuZXdUZXh0ID0gbmV4dFRleHQ7DQogICAgICAgICAgaWYgKHJlc3VsdHMuc29tZShzdWNjZXNzID0+ICFzdWNjZXNzKSkgew0KICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfpg6jliIbooaXkuIHlupTnlKjlpLHotKUnKTsNCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgLy8g55Sf5oiQ5qCH5YeG5beu5byCDQogICAgICAgIGNvbnN0IGRpZmZzID0gdGhpcy5kbXAuZGlmZl9tYWluKHRoaXMub2xkVGV4dCwgbmV3VGV4dCkNCiAgICAgICAgdGhpcy5kbXAuZGlmZl9jbGVhbnVwU2VtYW50aWMoZGlmZnMpICAvLyDkvJjljJblt67lvILmmL7npLoNCg0KICAgICAgICBjb25zb2xlLmxvZygn5qCH5YeG5beu5byCOicsICFBcnJheS5pc0FycmF5KGRpZmZzKSwgIUFycmF5LmlzQXJyYXkoZGlmZnMpIHx8IGRpZmZzLmxlbmd0aCA8IDIpDQogICAgICAgIC8vIOWkhOeQhuW3ruW8gue7k+aenA0KICAgICAgICB0aGlzLmdlbmVyYXRlTGluZXMoZGlmZnMpDQogICAgICAgIC8vIHRoaXMucGFnaW5hdGlvbi50b3RhbCA9IHJlc3BvbnNlLmRhdGEuZGF0YS50b3RhbCB8fCAwOw0KICAgICAgfSBjYXRjaCAoZXJyb3IpIHsNCiAgICAgICAgY29uc29sZS5lcnJvcign6K+35rGC5byC5bi4OicsIGVycm9yKTsNCiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcign5pWw5o2u5Yqg6L295aSx6LSlJyk7DQogICAgICB9DQogICAgfSwNCiAgICBnZW5lcmF0ZUxpbmVzKGRpZmZzKSB7DQogICAgICBsZXQgb2xkTGluZU51bSA9IDENCiAgICAgIGxldCBuZXdMaW5lTnVtID0gMQ0KICAgICAgY29uc3Qgb2xkTGluZXMgPSBbXQ0KICAgICAgY29uc3QgbmV3TGluZXMgPSBbXQ0KDQogICAgICBjb25zb2xlLmxvZyhkaWZmcykNCiAgICAgIC8vIOWuieWFqOmBjeWOhuW3ruW8gg0KICAgICAgZGlmZnMuZm9yRWFjaChkaWZmID0+IHsNCiAgICAgICAgY29uc3QgdHlwZSA9IGRpZmZbMF0NCiAgICAgICAgY29uc3QgY29udGVudCA9IGRpZmZbMV0NCg0KICAgICAgICBjb25zdCBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoJ1xuJykuZmlsdGVyKGwgPT4gbCAhPT0gJycpDQoNCiAgICAgICAgY29uc29sZS5sb2coJ+WkhOeQhuW3ruW8gjonLCBsaW5lcykNCiAgICAgICAgc3dpdGNoICh0eXBlKSB7DQogICAgICAgICAgY2FzZSAxOg0KICAgICAgICAgICAgb2xkTGluZXMucHVzaCh7DQogICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsDQogICAgICAgICAgICAgIG9sZE51bTogb2xkTGluZU51bSsrLA0KICAgICAgICAgICAgICB0eXBlOiAncmVtb3ZlZCcNCiAgICAgICAgICAgIH0pDQogICAgICAgICAgICBuZXdMaW5lcy5wdXNoKHsgdHlwZTogJ2VtcHR5JyB9KQ0KICAgICAgICAgICAgYnJlYWsNCg0KICAgICAgICAgIGNhc2UgLTE6DQogICAgICAgICAgICBuZXdMaW5lcy5wdXNoKHsNCiAgICAgICAgICAgICAgY29udGVudDogY29udGVudCwNCiAgICAgICAgICAgICAgbmV3TnVtOiBuZXdMaW5lTnVtKyssDQogICAgICAgICAgICAgIHR5cGU6ICdhZGRlZCcNCiAgICAgICAgICAgIH0pDQogICAgICAgICAgICBvbGRMaW5lcy5wdXNoKHsgdHlwZTogJ2VtcHR5JyB9KQ0KICAgICAgICAgICAgYnJlYWsNCg0KICAgICAgICAgIGRlZmF1bHQ6ICAvLyBESUZGX0VRVUFMDQogICAgICAgICAgICBvbGRMaW5lcy5wdXNoKHsNCiAgICAgICAgICAgICAgY29udGVudDogY29udGVudCwNCiAgICAgICAgICAgICAgb2xkTnVtOiBvbGRMaW5lTnVtKyssDQogICAgICAgICAgICAgIHR5cGU6ICdzYW1lJw0KICAgICAgICAgICAgfSkNCiAgICAgICAgICAgIG5ld0xpbmVzLnB1c2goew0KICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50LA0KICAgICAgICAgICAgICBuZXdOdW06IG5ld0xpbmVOdW0rKywNCiAgICAgICAgICAgICAgdHlwZTogJ3NhbWUnDQogICAgICAgICAgICB9KQ0KICAgICAgICB9DQogICAgICB9KQ0KICAgICAgdGhpcy5vbGRMaW5lcyA9IG9sZExpbmVzDQogICAgICB0aGlzLm5ld0xpbmVzID0gbmV3TGluZXMNCiAgICAgIHRoaXMub2xkTGluZXMgPSB0aGlzLnNwbGl0QnlOZXdsaW5lKHRoaXMub2xkTGluZXMpDQogICAgICB0aGlzLm5ld0xpbmVzID0gdGhpcy5zcGxpdEJ5TmV3bGluZSh0aGlzLm5ld0xpbmVzKQ0KICAgIH0sDQogICAgc3BsaXRCeU5ld2xpbmUoaXRlbXMpIHsNCiAgICAgIGNvbnN0IHJlc3VsdCA9IFtdOw0KICAgICAgbGV0IGNvdW50ZXIgPSAwOw0KDQogICAgICAvLyDlpoLmnpzovpPlhaXmlbDnu4TkuK3lt7LmnIkgbmV3TnVt77yM5bCx5LuO5pyA5aSn55qE5byA5aeLKzHvvIzlkKbliJnku44x5byA5aeLDQogICAgICBpZiAoaXRlbXMubGVuZ3RoID4gMCkgew0KICAgICAgICBjb25zdCBtYXhOdW0gPSBNYXRoLm1heCguLi5pdGVtcy5tYXAoaXQgPT4gaXQubmV3TnVtKSk7DQogICAgICAgIGNvdW50ZXIgPSBtYXhOdW0gKyAxOw0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgY291bnRlciA9IDE7DQogICAgICB9DQoNCiAgICAgIC8vIOato+WIme+8muWMuemFjeaJgOacieaNouihjOihqOeOsA0KICAgICAgY29uc3QgbmV3bGluZVJlID0gLyhcclxufFxyfFxuKS87DQoNCiAgICAgIGl0ZW1zLmZvckVhY2goaXRlbSA9PiB7DQogICAgICAgIGNvbnN0IHsgY29udGVudCwgdHlwZSB9ID0gaXRlbTsNCg0KICAgICAgICAvLyDlpoLmnpzlhoXlrrnkuK3msqHmnInmjaLooYzvvIznm7TmjqXljp/lsIHkuI3liqjmjqjlhaUNCiAgICAgICAgaWYgKCFuZXdsaW5lUmUudGVzdChjb250ZW50KSkgew0KICAgICAgICAgIHJlc3VsdC5wdXNoKHsgY29udGVudCwgbmV3TnVtOiBjb3VudGVyKyssIHR5cGUgfSk7DQogICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8g5ZCm5YiZ5YWI5oyJ5o2i6KGM5YiG5Ymy5bm25L+d55WZ5YiG6ZqU56ymDQogICAgICAgIGNvbnN0IHBhcnRzID0gY29udGVudC5zcGxpdChuZXdsaW5lUmUpOw0KDQogICAgICAgIHBhcnRzLmZvckVhY2godG9rZW4gPT4gew0KICAgICAgICAgIGlmIChuZXdsaW5lUmUudGVzdCh0b2tlbikpIHsNCiAgICAgICAgICAgIC8vIOmBh+WIsOaNouihjOespu+8jOaPkuWFpeS4gOS4quepuiBjb250ZW50IOeahCBlbnRlciDlhYPntKANCiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHsNCiAgICAgICAgICAgICAgY29udGVudDogJycsDQogICAgICAgICAgICAgIG5ld051bTogY291bnRlcisrLA0KICAgICAgICAgICAgICB0eXBlOiAnZW50ZXInDQogICAgICAgICAgICB9KTsNCiAgICAgICAgICB9IGVsc2UgaWYgKHRva2VuLmxlbmd0aCA+IDApIHsNCiAgICAgICAgICAgIC8vIOaZrumAmuaWh+acrOauteiQvQ0KICAgICAgICAgICAgcmVzdWx0LnB1c2goew0KICAgICAgICAgICAgICBjb250ZW50OiB0b2tlbiwNCiAgICAgICAgICAgICAgbmV3TnVtOiBjb3VudGVyKyssDQogICAgICAgICAgICAgIHR5cGU6IHR5cGUgIC8vIOS/neaMgeWOn+adpeWFg+e0oOeahCB0eXBl77yM5q+U5aaCICdzYW1lJw0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgfQ0KICAgICAgICAgIC8vIOWmguaenCB0b2tlbiDml6LkuI3mmK/mjaLooYzkuZ/kuLrnqbrkuLLvvIzlsLHot7Pov4cNCiAgICAgICAgfSk7DQogICAgICB9KTsNCg0KICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICB9LA0KICAgIGhhbmRsZVRleHRTZWxlY3Rpb24oKSB7DQogICAgICBjb25zdCBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7DQogICAgICBpZiAoIXNlbGVjdGlvbi5yYW5nZUNvdW50KSByZXR1cm47DQogICAgICBjb25zdCByYW5nZSA9IHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApOw0KICAgICAgY29uc3Qgc2VsZWN0ZWRUZXh0ID0gcmFuZ2UudG9TdHJpbmcoKS50cmltKCk7DQogICAgICBpZiAoc2VsZWN0ZWRUZXh0KSB7DQogICAgICAgIHRoaXMuc2VsZWN0ZWRUZXh0ID0gc2VsZWN0ZWRUZXh0Ow0KICAgICAgICB0aGlzLnNlbGVjdGVkUmFuZ2UgPSByYW5nZTsNCiAgICAgICAgdGhpcy5zaG93Q29tbWVudElucHV0ID0gdHJ1ZTsNCiAgICAgIH0NCiAgICB9LA0KDQogICAgc2F2ZUFubm90YXRpb24oKSB7DQogICAgICBpZiAoIXRoaXMuY29tbWVudElucHV0KSByZXR1cm47DQoNCiAgICAgIGNvbnN0IG5ld0Fubm90YXRpb24gPSB7DQogICAgICAgIGlkOiBEYXRlLm5vdygpLA0KICAgICAgICBzZWxlY3RlZFRleHQ6IHRoaXMuc2VsZWN0ZWRUZXh0LA0KICAgICAgICBjb21tZW50OiB0aGlzLmNvbW1lbnRJbnB1dCwNCiAgICAgICAgc3RhcnRPZmZzZXQ6IHRoaXMuc2VsZWN0ZWRSYW5nZS5zdGFydE9mZnNldCwNCiAgICAgICAgZW5kT2Zmc2V0OiB0aGlzLnNlbGVjdGVkUmFuZ2UuZW5kT2Zmc2V0LA0KICAgICAgICBzdGFydENvbnRhaW5lclBhdGg6IHRoaXMuZ2V0Tm9kZVBhdGgodGhpcy5zZWxlY3RlZFJhbmdlLnN0YXJ0Q29udGFpbmVyKSwNCiAgICAgICAgZW5kQ29udGFpbmVyUGF0aDogdGhpcy5nZXROb2RlUGF0aCh0aGlzLnNlbGVjdGVkUmFuZ2UuZW5kQ29udGFpbmVyKQ0KICAgICAgfTsNCg0KICAgICAgdGhpcy5hbm5vdGF0aW9ucy5wdXNoKG5ld0Fubm90YXRpb24pOw0KICAgICAgdGhpcy5jbGVhclNlbGVjdGlvbigpOw0KICAgIH0sDQoNCiAgICBjYW5jZWxBbm5vdGF0aW9uKCkgew0KICAgICAgdGhpcy5jbGVhclNlbGVjdGlvbigpOw0KICAgIH0sDQoNCiAgICBjbGVhclNlbGVjdGlvbigpIHsNCiAgICAgIHRoaXMuc2hvd0NvbW1lbnRJbnB1dCA9IGZhbHNlOw0KICAgICAgdGhpcy5jb21tZW50SW5wdXQgPSAnJzsNCiAgICAgIHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKTsNCiAgICB9LA0KDQogICAgLy8g5bCGRE9N6IqC54K56Lev5b6E6L2s5o2i5Li65Y+v5bqP5YiX5YyW55qE6Lev5b6EDQogICAgZ2V0Tm9kZVBhdGgobm9kZSkgew0KICAgICAgY29uc3QgcGF0aCA9IFtdOw0KICAgICAgd2hpbGUgKG5vZGUucGFyZW50Tm9kZSkgew0KICAgICAgICBwYXRoLnB1c2goQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChub2RlLnBhcmVudE5vZGUuY2hpbGROb2Rlcywgbm9kZSkpOw0KICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlOw0KICAgICAgfQ0KICAgICAgcmV0dXJuIHBhdGg7DQogICAgfSwNCg0KICAgIC8vIOS7juW6j+WIl+WMluWtl+espuS4suWKoOi9veaJueazqA0KICAgIGxvYWRBbm5vdGF0aW9ucyhzZXJpYWxpemVkKSB7DQogICAgICB0cnkgew0KICAgICAgICB0aGlzLmFubm90YXRpb25zID0gSlNPTi5wYXJzZShzZXJpYWxpemVkKS5tYXAoYW5ubyA9PiAoew0KICAgICAgICAgIC4uLmFubm8sDQogICAgICAgICAgcmFuZ2U6IHRoaXMucmVzdG9yZVJhbmdlKGFubm8pDQogICAgICAgIH0pKTsNCiAgICAgIH0gY2F0Y2ggKGUpIHsNCiAgICAgICAgY29uc29sZS5lcnJvcign6Kej5p6Q5om55rOo5aSx6LSlOicsIGUpOw0KICAgICAgfQ0KICAgIH0sDQoNCiAgICAvLyDov5jljp9SYW5nZeWvueixoQ0KICAgIHJlc3RvcmVSYW5nZShhbm5vdGF0aW9uKSB7DQogICAgICBjb25zdCByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7DQoNCiAgICAgIGxldCBzdGFydE5vZGUgPSBkb2N1bWVudC5ib2R5Ow0KICAgICAgYW5ub3RhdGlvbi5zdGFydENvbnRhaW5lclBhdGgucmV2ZXJzZSgpLmZvckVhY2goaW5kZXggPT4gew0KICAgICAgICBzdGFydE5vZGUgPSBzdGFydE5vZGUuY2hpbGROb2Rlc1tpbmRleF07DQogICAgICB9KTsNCg0KICAgICAgbGV0IGVuZE5vZGUgPSBkb2N1bWVudC5ib2R5Ow0KICAgICAgYW5ub3RhdGlvbi5lbmRDb250YWluZXJQYXRoLnJldmVyc2UoKS5mb3JFYWNoKGluZGV4ID0+IHsNCiAgICAgICAgZW5kTm9kZSA9IGVuZE5vZGUuY2hpbGROb2Rlc1tpbmRleF07DQogICAgICB9KTsNCg0KICAgICAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnROb2RlLCBhbm5vdGF0aW9uLnN0YXJ0T2Zmc2V0KTsNCiAgICAgIHJhbmdlLnNldEVuZChlbmROb2RlLCBhbm5vdGF0aW9uLmVuZE9mZnNldCk7DQogICAgICByZXR1cm4gcmFuZ2U7DQogICAgfSwNCg0KICAgIHNjcm9sbFRvQW5ub3RhdGlvbihhbm5vdGF0aW9uKSB7DQogICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtaWQ9IiR7YW5ub3RhdGlvbi5pZH0iXWApOw0KICAgICAgaWYgKGVsZW1lbnQpIHsNCiAgICAgICAgZWxlbWVudC5zY3JvbGxJbnRvVmlldyh7IGJlaGF2aW9yOiAnc21vb3RoJyB9KTsNCiAgICAgIH0NCiAgICB9DQogIH0NCn0NCg=="},{"version":3,"sources":["ModificationCompare.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"ModificationCompare.vue","sourceRoot":"src/views/student/practice","sourcesContent":["<template>\r\n  <div>\r\n    <div style=\"position: fixed; left: 50%; transform: translateX(-50%); margin: 10px; z-index: 10;\">\r\n      <el-switch v-model=\"showDiff\" class=\"ml-2\" inline-prompt\r\n        style=\"--el-switch-on-color: #13ce66; --el-switch-off-color: #ff4949;\" active-text=\"论文版本显示\"\r\n        inactive-text=\"新版本论文批注显示\" />\r\n    </div>\r\n    <div style=\"margin-top: 40px;\">\r\n      <div v-if=\"showDiff\" class=\"diff-page-wrapper\">\r\n        <!-- 新旧版本对比区（占比 60%） -->\r\n        <div class=\"diff-page\">\r\n          <!-- 旧版本 -->\r\n          <div class=\"diff-column\">\r\n            <div class=\"header\">旧版本</div>\r\n            <div class=\"lines\">\r\n              <span v-for=\"(line, index) in oldLines\" :key=\"'old-' + index\" class=\"line\"\r\n                :class=\"{ deleted: line.type === 'removed' }\">\r\n                <div v-if=\"line.type === 'enter'\"><br /></div>\r\n                <span v-else class=\"content\">{{ line.content }}</span>\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <!-- 新版本 -->\r\n          <div class=\"diff-column\">\r\n            <div class=\"header\">新版本</div>\r\n            <div class=\"lines\">\r\n              <span v-for=\"(line, index) in newLines\" :key=\"'new-' + index\" class=\"line\"\r\n                :class=\"{ added: line.type === 'added' }\">\r\n                <div v-if=\"line.type === 'enter'\"><br /></div>\r\n                <span v-else class=\"content\">{{ line.content }}</span>\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <!-- 旧版本批准查看区（占比 30%） -->\r\n        <!-- 旧版本批准查看区（占比 30%），展示旧版本批注 comment -->\r\n        <div class=\"comparison-result\">\r\n          <div class=\"header\">旧版本批准查看</div>\r\n          <div class=\"comparison-body\">\r\n            <div v-for=\"anno in annotations\" :key=\"anno.id\" class=\"annotation-item\">\r\n              <!-- 只展示 comment，点击后滚动到旧版本 diff 中对应 selectedText -->\r\n              <span class=\"highlight\" @click=\"scrollToOld(anno)\">{{ anno.comment }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n      <!-- 论文批注显示 -->\r\n      <div v-else class=\"container\">\r\n        <div class=\"article-content\" @mouseup=\"handleTextSelection\" v-html=\"annotatedContent\"></div>\r\n        <div class=\"annotations-list\">\r\n          <div v-for=\"(annotation, index) in annotations\" :key=\"index\" class=\"annotation-item\">\r\n            <span class=\"highlight\" @click=\"scrollToAnnotation(annotation)\">\r\n              {{ annotation.selectedText }}\r\n            </span>\r\n            <div class=\"comment\">{{ annotation.comment }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { diff_match_patch } from '../../../api/diff_match_patch'\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      dmp: new diff_match_patch(),\r\n      oldText: '原始文本内容\\n第二行原始内容\\n第三行原始内容',\r\n      patchText: '@@ -1,3 +1,4 @@\\n 原始文本内容\\n-第二行原始内容\\n+第二行修改后的内容\\n+新增的第四行内容\\n 第三行原始内容\\n',\r\n      oldLines: [],\r\n      newLines: [],\r\n      showDiff: true,\r\n      articleContent: `这里是一篇示例文章内容，包含多个段落。教师可以选中任意文本片段进行批注。\r\n          批注功能需要准确记录选中文本的位置和内容，并支持后续的展示和还原。`,\r\n      annotations: [],\r\n      selectedText: '',\r\n      selectedRange: null,\r\n      commentInput: '',\r\n    }\r\n  },\r\n  mounted() {\r\n    this.loadData()\r\n    this.processDiff()\r\n\r\n  },\r\n  computed: {\r\n    // 生成包含批注标记的内容\r\n    annotatedContent() {\r\n      let content = this.articleContent;\r\n      this.annotations.forEach(anno => {\r\n        const highlight = `<span class=\"highlight\" data-id=\"${anno.id}\">${anno.selectedText}</span>`;\r\n        content = content.replace(anno.selectedText, highlight);\r\n      });\r\n      return content;\r\n    },\r\n    // 序列化批注信息\r\n    serializedAnnotations() {\r\n      return JSON.stringify(this.annotations);\r\n    }\r\n  },\r\n  methods: {\r\n    scrollToOld(annotation) {\r\n      const contentEls = this.$el.querySelectorAll('.diff-page .diff-column:first-child .content');\r\n      for (const el of contentEls) {\r\n        if (el.textContent.includes(annotation.selectedText)) {\r\n          el.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n          el.classList.add('temp-highlight');\r\n          setTimeout(() => el.classList.remove('temp-highlight'), 2000);\r\n          break;\r\n        }\r\n      }\r\n    },\r\n    async loadData() {\r\n      try {\r\n        const modification = JSON.parse(localStorage.getItem('modification'))\r\n        const prevModification = JSON.parse(localStorage.getItem('prevModification'))\r\n        console.log(modification)\r\n        const response = await axios.get(\r\n          'http://localhost:9251/api/modification/getDocByModificationId/' + modification.docId + '/' + modification.id,\r\n        );\r\n        const modificationList = response.data.resultData\r\n        this.patchText = response.data.modification\r\n        console.log(modificationList)\r\n        const response2 = await axios.get(\r\n          'http://localhost:9251/api/docs/' + modification.docId,\r\n        );\r\n        this.oldText = response2.data.txt\r\n        let newText = response2.data.txt\r\n        this.articleContent = response2.data.txt\r\n        try {\r\n          const response3 = await axios.get(\r\n            'http://localhost:9251/api/marking/getByModificationId/' + prevModification.id,\r\n          );\r\n          this.annotations = JSON.parse(response3.data.marking)\r\n          console.log('this.annotations')\r\n          console.log(this.annotations)\r\n        } catch (error) {\r\n          console.log(error)\r\n        }\r\n        for (let i = modificationList.length - 1; i >= 0; i--) {\r\n          const data = modificationList[i];\r\n          const patches = this.dmp.patch_fromText(data.modification);\r\n          const [nextText, results] = this.dmp.patch_apply(patches, newText);\r\n          this\r\n          newText = nextText;\r\n          if (results.some(success => !success)) {\r\n            throw new Error('部分补丁应用失败');\r\n          }\r\n        }\r\n        // 生成标准差异\r\n        const diffs = this.dmp.diff_main(this.oldText, newText)\r\n        this.dmp.diff_cleanupSemantic(diffs)  // 优化差异显示\r\n\r\n        console.log('标准差异:', !Array.isArray(diffs), !Array.isArray(diffs) || diffs.length < 2)\r\n        // 处理差异结果\r\n        this.generateLines(diffs)\r\n        // this.pagination.total = response.data.data.total || 0;\r\n      } catch (error) {\r\n        console.error('请求异常:', error);\r\n        this.$message.error('数据加载失败');\r\n      }\r\n    },\r\n    generateLines(diffs) {\r\n      let oldLineNum = 1\r\n      let newLineNum = 1\r\n      const oldLines = []\r\n      const newLines = []\r\n\r\n      console.log(diffs)\r\n      // 安全遍历差异\r\n      diffs.forEach(diff => {\r\n        const type = diff[0]\r\n        const content = diff[1]\r\n\r\n        const lines = content.split('\\n').filter(l => l !== '')\r\n\r\n        console.log('处理差异:', lines)\r\n        switch (type) {\r\n          case 1:\r\n            oldLines.push({\r\n              content: content,\r\n              oldNum: oldLineNum++,\r\n              type: 'removed'\r\n            })\r\n            newLines.push({ type: 'empty' })\r\n            break\r\n\r\n          case -1:\r\n            newLines.push({\r\n              content: content,\r\n              newNum: newLineNum++,\r\n              type: 'added'\r\n            })\r\n            oldLines.push({ type: 'empty' })\r\n            break\r\n\r\n          default:  // DIFF_EQUAL\r\n            oldLines.push({\r\n              content: content,\r\n              oldNum: oldLineNum++,\r\n              type: 'same'\r\n            })\r\n            newLines.push({\r\n              content: content,\r\n              newNum: newLineNum++,\r\n              type: 'same'\r\n            })\r\n        }\r\n      })\r\n      this.oldLines = oldLines\r\n      this.newLines = newLines\r\n      this.oldLines = this.splitByNewline(this.oldLines)\r\n      this.newLines = this.splitByNewline(this.newLines)\r\n    },\r\n    splitByNewline(items) {\r\n      const result = [];\r\n      let counter = 0;\r\n\r\n      // 如果输入数组中已有 newNum，就从最大的开始+1，否则从1开始\r\n      if (items.length > 0) {\r\n        const maxNum = Math.max(...items.map(it => it.newNum));\r\n        counter = maxNum + 1;\r\n      } else {\r\n        counter = 1;\r\n      }\r\n\r\n      // 正则：匹配所有换行表现\r\n      const newlineRe = /(\\r\\n|\\r|\\n)/;\r\n\r\n      items.forEach(item => {\r\n        const { content, type } = item;\r\n\r\n        // 如果内容中没有换行，直接原封不动推入\r\n        if (!newlineRe.test(content)) {\r\n          result.push({ content, newNum: counter++, type });\r\n          return;\r\n        }\r\n\r\n        // 否则先按换行分割并保留分隔符\r\n        const parts = content.split(newlineRe);\r\n\r\n        parts.forEach(token => {\r\n          if (newlineRe.test(token)) {\r\n            // 遇到换行符，插入一个空 content 的 enter 元素\r\n            result.push({\r\n              content: '',\r\n              newNum: counter++,\r\n              type: 'enter'\r\n            });\r\n          } else if (token.length > 0) {\r\n            // 普通文本段落\r\n            result.push({\r\n              content: token,\r\n              newNum: counter++,\r\n              type: type  // 保持原来元素的 type，比如 'same'\r\n            });\r\n          }\r\n          // 如果 token 既不是换行也为空串，就跳过\r\n        });\r\n      });\r\n\r\n      return result;\r\n    },\r\n    handleTextSelection() {\r\n      const selection = window.getSelection();\r\n      if (!selection.rangeCount) return;\r\n      const range = selection.getRangeAt(0);\r\n      const selectedText = range.toString().trim();\r\n      if (selectedText) {\r\n        this.selectedText = selectedText;\r\n        this.selectedRange = range;\r\n        this.showCommentInput = true;\r\n      }\r\n    },\r\n\r\n    saveAnnotation() {\r\n      if (!this.commentInput) return;\r\n\r\n      const newAnnotation = {\r\n        id: Date.now(),\r\n        selectedText: this.selectedText,\r\n        comment: this.commentInput,\r\n        startOffset: this.selectedRange.startOffset,\r\n        endOffset: this.selectedRange.endOffset,\r\n        startContainerPath: this.getNodePath(this.selectedRange.startContainer),\r\n        endContainerPath: this.getNodePath(this.selectedRange.endContainer)\r\n      };\r\n\r\n      this.annotations.push(newAnnotation);\r\n      this.clearSelection();\r\n    },\r\n\r\n    cancelAnnotation() {\r\n      this.clearSelection();\r\n    },\r\n\r\n    clearSelection() {\r\n      this.showCommentInput = false;\r\n      this.commentInput = '';\r\n      window.getSelection().removeAllRanges();\r\n    },\r\n\r\n    // 将DOM节点路径转换为可序列化的路径\r\n    getNodePath(node) {\r\n      const path = [];\r\n      while (node.parentNode) {\r\n        path.push(Array.prototype.indexOf.call(node.parentNode.childNodes, node));\r\n        node = node.parentNode;\r\n      }\r\n      return path;\r\n    },\r\n\r\n    // 从序列化字符串加载批注\r\n    loadAnnotations(serialized) {\r\n      try {\r\n        this.annotations = JSON.parse(serialized).map(anno => ({\r\n          ...anno,\r\n          range: this.restoreRange(anno)\r\n        }));\r\n      } catch (e) {\r\n        console.error('解析批注失败:', e);\r\n      }\r\n    },\r\n\r\n    // 还原Range对象\r\n    restoreRange(annotation) {\r\n      const range = document.createRange();\r\n\r\n      let startNode = document.body;\r\n      annotation.startContainerPath.reverse().forEach(index => {\r\n        startNode = startNode.childNodes[index];\r\n      });\r\n\r\n      let endNode = document.body;\r\n      annotation.endContainerPath.reverse().forEach(index => {\r\n        endNode = endNode.childNodes[index];\r\n      });\r\n\r\n      range.setStart(startNode, annotation.startOffset);\r\n      range.setEnd(endNode, annotation.endOffset);\r\n      return range;\r\n    },\r\n\r\n    scrollToAnnotation(annotation) {\r\n      const element = document.querySelector(`[data-id=\"${annotation.id}\"]`);\r\n      if (element) {\r\n        element.scrollIntoView({ behavior: 'smooth' });\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nhtml,\r\nbody {\r\n  height: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n  overflow: auto;\r\n}\r\n\r\n:host {\r\n  display: block;\r\n  height: 100%;\r\n}\r\n\r\n.diff-page-wrapper {\r\n  display: flex;\r\n  flex-direction: column;\r\n  /* 总高度可以根据需要留白，这里默认撑满剩余 */\r\n  height: calc(100vh - 60px);\r\n  /* 减去顶部开关的高度和 margin */\r\n}\r\n\r\n/* 新旧版本对比区：60% 视口高度 */\r\n.diff-page {\r\n  display: flex;\r\n  gap: 20px;\r\n  flex: 6;\r\n  /* 60% */\r\n  overflow: hidden;\r\n  /* 由子元素滚动 */\r\n  font-family: monospace;\r\n}\r\n\r\n.diff-column {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  border: 1px solid #e1e4e8;\r\n  border-radius: 6px;\r\n  overflow-y: auto;\r\n  /* 各自独立滚动 */\r\n}\r\n\r\n.header {\r\n  padding: 10px;\r\n  background: #f6f8fa;\r\n  border-bottom: 1px solid #e1e4e8;\r\n  font-weight: bold;\r\n}\r\n\r\n.line {\r\n  display: inline;\r\n}\r\n\r\n.deleted {\r\n  background-color: #ffeef0;\r\n}\r\n\r\n.added {\r\n  background-color: #e6ffed;\r\n}\r\n\r\n.content {\r\n  white-space: pre-wrap;\r\n}\r\n\r\n/* 旧版本批准查看框：30% 视口高度 */\r\n.comparison-result {\r\n  border: 1px solid #e1e4e8;\r\n  border-radius: 6px;\r\n  background: #fefefe;\r\n\r\n  height: 30vh;\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n/* 比较内容区内边距 */\r\n.comparison-body {\r\n  padding: 10px;\r\n  flex: 1;\r\n  overflow-y: auto;\r\n}\r\n\r\n/* 以下为批注显示样式（不变） */\r\n.container {\r\n  display: flex;\r\n  margin: 0 auto;\r\n}\r\n\r\n.article-content {\r\n  flex: 2;\r\n  padding: 20px;\r\n  line-height: 1.6;\r\n  border-right: 1px solid #ccc;\r\n  overflow-y: auto;\r\n  max-height: calc(100vh - 60px);\r\n}\r\n\r\n.comparison-result {\r\n  border: 1px solid #e1e4e8;\r\n  border-radius: 6px;\r\n  background: #fefefe;\r\n  /* height: 30vh; */\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.annotations-list {\r\n  flex: 1;\r\n  padding: 20px;\r\n  overflow-y: auto;\r\n  max-height: calc(100vh - 60px);\r\n}\r\n\r\n.highlight {\r\n  background-color: #ffeb3b;\r\n  cursor: pointer;\r\n}\r\n\r\n.annotation-item {\r\n  margin-bottom: 15px;\r\n  padding: 10px;\r\n  border: 1px solid #eee;\r\n}\r\n.temp-highlight {\r\n  background-color: #90ee90 !important;\r\n}\r\n\r\n</style>"]}]}